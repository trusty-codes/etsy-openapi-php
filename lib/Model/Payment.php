<?php
/**
 * Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Payment Class Doc Comment
 *
 * @category Class
 * @description Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_id' => 'int',
'buyer_user_id' => 'int',
'shop_id' => 'int',
'receipt_id' => 'int',
'amount_gross' => 'AllOfPaymentAmountGross',
'amount_fees' => 'AllOfPaymentAmountFees',
'amount_net' => 'AllOfPaymentAmountNet',
'posted_gross' => 'AllOfPaymentPostedGross',
'posted_fees' => 'AllOfPaymentPostedFees',
'posted_net' => 'AllOfPaymentPostedNet',
'adjusted_gross' => 'AllOfPaymentAdjustedGross',
'adjusted_fees' => 'AllOfPaymentAdjustedFees',
'adjusted_net' => 'AllOfPaymentAdjustedNet',
'currency' => 'string',
'shop_currency' => 'string',
'buyer_currency' => 'string',
'shipping_user_id' => 'int',
'shipping_address_id' => 'int',
'billing_address_id' => 'int',
'status' => 'string',
'shipped_timestamp' => 'int',
'create_timestamp' => 'int',
'created_timestamp' => 'int',
'update_timestamp' => 'int',
'updated_timestamp' => 'int',
'payment_adjustments' => '\Swagger\Client\Model\AllOfPaymentPaymentAdjustmentsItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_id' => null,
'buyer_user_id' => null,
'shop_id' => null,
'receipt_id' => null,
'amount_gross' => null,
'amount_fees' => null,
'amount_net' => null,
'posted_gross' => null,
'posted_fees' => null,
'posted_net' => null,
'adjusted_gross' => null,
'adjusted_fees' => null,
'adjusted_net' => null,
'currency' => null,
'shop_currency' => null,
'buyer_currency' => null,
'shipping_user_id' => null,
'shipping_address_id' => null,
'billing_address_id' => null,
'status' => null,
'shipped_timestamp' => null,
'create_timestamp' => null,
'created_timestamp' => null,
'update_timestamp' => null,
'updated_timestamp' => null,
'payment_adjustments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_id' => 'payment_id',
'buyer_user_id' => 'buyer_user_id',
'shop_id' => 'shop_id',
'receipt_id' => 'receipt_id',
'amount_gross' => 'amount_gross',
'amount_fees' => 'amount_fees',
'amount_net' => 'amount_net',
'posted_gross' => 'posted_gross',
'posted_fees' => 'posted_fees',
'posted_net' => 'posted_net',
'adjusted_gross' => 'adjusted_gross',
'adjusted_fees' => 'adjusted_fees',
'adjusted_net' => 'adjusted_net',
'currency' => 'currency',
'shop_currency' => 'shop_currency',
'buyer_currency' => 'buyer_currency',
'shipping_user_id' => 'shipping_user_id',
'shipping_address_id' => 'shipping_address_id',
'billing_address_id' => 'billing_address_id',
'status' => 'status',
'shipped_timestamp' => 'shipped_timestamp',
'create_timestamp' => 'create_timestamp',
'created_timestamp' => 'created_timestamp',
'update_timestamp' => 'update_timestamp',
'updated_timestamp' => 'updated_timestamp',
'payment_adjustments' => 'payment_adjustments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_id' => 'setPaymentId',
'buyer_user_id' => 'setBuyerUserId',
'shop_id' => 'setShopId',
'receipt_id' => 'setReceiptId',
'amount_gross' => 'setAmountGross',
'amount_fees' => 'setAmountFees',
'amount_net' => 'setAmountNet',
'posted_gross' => 'setPostedGross',
'posted_fees' => 'setPostedFees',
'posted_net' => 'setPostedNet',
'adjusted_gross' => 'setAdjustedGross',
'adjusted_fees' => 'setAdjustedFees',
'adjusted_net' => 'setAdjustedNet',
'currency' => 'setCurrency',
'shop_currency' => 'setShopCurrency',
'buyer_currency' => 'setBuyerCurrency',
'shipping_user_id' => 'setShippingUserId',
'shipping_address_id' => 'setShippingAddressId',
'billing_address_id' => 'setBillingAddressId',
'status' => 'setStatus',
'shipped_timestamp' => 'setShippedTimestamp',
'create_timestamp' => 'setCreateTimestamp',
'created_timestamp' => 'setCreatedTimestamp',
'update_timestamp' => 'setUpdateTimestamp',
'updated_timestamp' => 'setUpdatedTimestamp',
'payment_adjustments' => 'setPaymentAdjustments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_id' => 'getPaymentId',
'buyer_user_id' => 'getBuyerUserId',
'shop_id' => 'getShopId',
'receipt_id' => 'getReceiptId',
'amount_gross' => 'getAmountGross',
'amount_fees' => 'getAmountFees',
'amount_net' => 'getAmountNet',
'posted_gross' => 'getPostedGross',
'posted_fees' => 'getPostedFees',
'posted_net' => 'getPostedNet',
'adjusted_gross' => 'getAdjustedGross',
'adjusted_fees' => 'getAdjustedFees',
'adjusted_net' => 'getAdjustedNet',
'currency' => 'getCurrency',
'shop_currency' => 'getShopCurrency',
'buyer_currency' => 'getBuyerCurrency',
'shipping_user_id' => 'getShippingUserId',
'shipping_address_id' => 'getShippingAddressId',
'billing_address_id' => 'getBillingAddressId',
'status' => 'getStatus',
'shipped_timestamp' => 'getShippedTimestamp',
'create_timestamp' => 'getCreateTimestamp',
'created_timestamp' => 'getCreatedTimestamp',
'update_timestamp' => 'getUpdateTimestamp',
'updated_timestamp' => 'getUpdatedTimestamp',
'payment_adjustments' => 'getPaymentAdjustments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['buyer_user_id'] = isset($data['buyer_user_id']) ? $data['buyer_user_id'] : null;
        $this->container['shop_id'] = isset($data['shop_id']) ? $data['shop_id'] : null;
        $this->container['receipt_id'] = isset($data['receipt_id']) ? $data['receipt_id'] : null;
        $this->container['amount_gross'] = isset($data['amount_gross']) ? $data['amount_gross'] : null;
        $this->container['amount_fees'] = isset($data['amount_fees']) ? $data['amount_fees'] : null;
        $this->container['amount_net'] = isset($data['amount_net']) ? $data['amount_net'] : null;
        $this->container['posted_gross'] = isset($data['posted_gross']) ? $data['posted_gross'] : null;
        $this->container['posted_fees'] = isset($data['posted_fees']) ? $data['posted_fees'] : null;
        $this->container['posted_net'] = isset($data['posted_net']) ? $data['posted_net'] : null;
        $this->container['adjusted_gross'] = isset($data['adjusted_gross']) ? $data['adjusted_gross'] : null;
        $this->container['adjusted_fees'] = isset($data['adjusted_fees']) ? $data['adjusted_fees'] : null;
        $this->container['adjusted_net'] = isset($data['adjusted_net']) ? $data['adjusted_net'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['shop_currency'] = isset($data['shop_currency']) ? $data['shop_currency'] : null;
        $this->container['buyer_currency'] = isset($data['buyer_currency']) ? $data['buyer_currency'] : null;
        $this->container['shipping_user_id'] = isset($data['shipping_user_id']) ? $data['shipping_user_id'] : null;
        $this->container['shipping_address_id'] = isset($data['shipping_address_id']) ? $data['shipping_address_id'] : null;
        $this->container['billing_address_id'] = isset($data['billing_address_id']) ? $data['billing_address_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['shipped_timestamp'] = isset($data['shipped_timestamp']) ? $data['shipped_timestamp'] : null;
        $this->container['create_timestamp'] = isset($data['create_timestamp']) ? $data['create_timestamp'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['update_timestamp'] = isset($data['update_timestamp']) ? $data['update_timestamp'] : null;
        $this->container['updated_timestamp'] = isset($data['updated_timestamp']) ? $data['updated_timestamp'] : null;
        $this->container['payment_adjustments'] = isset($data['payment_adjustments']) ? $data['payment_adjustments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return int
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param int $buyer_user_id The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
     *
     * @return $this
     */
    public function setBuyerUserId($buyer_user_id)
    {
        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return $this
     */
    public function setShopId($shop_id)
    {
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets receipt_id
     *
     * @return int
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     *
     * @return $this
     */
    public function setReceiptId($receipt_id)
    {
        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets amount_gross
     *
     * @return AllOfPaymentAmountGross
     */
    public function getAmountGross()
    {
        return $this->container['amount_gross'];
    }

    /**
     * Sets amount_gross
     *
     * @param AllOfPaymentAmountGross $amount_gross An integer equal to gross amount of the order, in pennies, including shipping and taxes.
     *
     * @return $this
     */
    public function setAmountGross($amount_gross)
    {
        $this->container['amount_gross'] = $amount_gross;

        return $this;
    }

    /**
     * Gets amount_fees
     *
     * @return AllOfPaymentAmountFees
     */
    public function getAmountFees()
    {
        return $this->container['amount_fees'];
    }

    /**
     * Sets amount_fees
     *
     * @param AllOfPaymentAmountFees $amount_fees An integer equal to the original card processing fee of the order in pennies.
     *
     * @return $this
     */
    public function setAmountFees($amount_fees)
    {
        $this->container['amount_fees'] = $amount_fees;

        return $this;
    }

    /**
     * Gets amount_net
     *
     * @return AllOfPaymentAmountNet
     */
    public function getAmountNet()
    {
        return $this->container['amount_net'];
    }

    /**
     * Sets amount_net
     *
     * @param AllOfPaymentAmountNet $amount_net An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
     *
     * @return $this
     */
    public function setAmountNet($amount_net)
    {
        $this->container['amount_net'] = $amount_net;

        return $this;
    }

    /**
     * Gets posted_gross
     *
     * @return AllOfPaymentPostedGross
     */
    public function getPostedGross()
    {
        return $this->container['posted_gross'];
    }

    /**
     * Sets posted_gross
     *
     * @param AllOfPaymentPostedGross $posted_gross The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider \"shipping\" to be the event which \"posts\" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the \"Credit\" amount in the ledger entry.
     *
     * @return $this
     */
    public function setPostedGross($posted_gross)
    {
        $this->container['posted_gross'] = $posted_gross;

        return $this;
    }

    /**
     * Gets posted_fees
     *
     * @return AllOfPaymentPostedFees
     */
    public function getPostedFees()
    {
        return $this->container['posted_fees'];
    }

    /**
     * Sets posted_fees
     *
     * @param AllOfPaymentPostedFees $posted_fees The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
     *
     * @return $this
     */
    public function setPostedFees($posted_fees)
    {
        $this->container['posted_fees'] = $posted_fees;

        return $this;
    }

    /**
     * Gets posted_net
     *
     * @return AllOfPaymentPostedNet
     */
    public function getPostedNet()
    {
        return $this->container['posted_net'];
    }

    /**
     * Sets posted_net
     *
     * @param AllOfPaymentPostedNet $posted_net The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
     *
     * @return $this
     */
    public function setPostedNet($posted_net)
    {
        $this->container['posted_net'] = $posted_net;

        return $this;
    }

    /**
     * Gets adjusted_gross
     *
     * @return AllOfPaymentAdjustedGross
     */
    public function getAdjustedGross()
    {
        return $this->container['adjusted_gross'];
    }

    /**
     * Sets adjusted_gross
     *
     * @param AllOfPaymentAdjustedGross $adjusted_gross The gross payment amount after the seller refunds a payment, partially or fully.
     *
     * @return $this
     */
    public function setAdjustedGross($adjusted_gross)
    {
        $this->container['adjusted_gross'] = $adjusted_gross;

        return $this;
    }

    /**
     * Gets adjusted_fees
     *
     * @return AllOfPaymentAdjustedFees
     */
    public function getAdjustedFees()
    {
        return $this->container['adjusted_fees'];
    }

    /**
     * Sets adjusted_fees
     *
     * @param AllOfPaymentAdjustedFees $adjusted_fees The new fee amount after a seller refunds a payment, partially or fully.
     *
     * @return $this
     */
    public function setAdjustedFees($adjusted_fees)
    {
        $this->container['adjusted_fees'] = $adjusted_fees;

        return $this;
    }

    /**
     * Gets adjusted_net
     *
     * @return AllOfPaymentAdjustedNet
     */
    public function getAdjustedNet()
    {
        return $this->container['adjusted_net'];
    }

    /**
     * Sets adjusted_net
     *
     * @param AllOfPaymentAdjustedNet $adjusted_net The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
     *
     * @return $this
     */
    public function setAdjustedNet($adjusted_net)
    {
        $this->container['adjusted_net'] = $adjusted_net;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The ISO (alphabetic) code string for the payment's currency.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets shop_currency
     *
     * @return string
     */
    public function getShopCurrency()
    {
        return $this->container['shop_currency'];
    }

    /**
     * Sets shop_currency
     *
     * @param string $shop_currency The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
     *
     * @return $this
     */
    public function setShopCurrency($shop_currency)
    {
        $this->container['shop_currency'] = $shop_currency;

        return $this;
    }

    /**
     * Gets buyer_currency
     *
     * @return string
     */
    public function getBuyerCurrency()
    {
        return $this->container['buyer_currency'];
    }

    /**
     * Sets buyer_currency
     *
     * @param string $buyer_currency The currency string of the buyer.
     *
     * @return $this
     */
    public function setBuyerCurrency($buyer_currency)
    {
        $this->container['buyer_currency'] = $buyer_currency;

        return $this;
    }

    /**
     * Gets shipping_user_id
     *
     * @return int
     */
    public function getShippingUserId()
    {
        return $this->container['shipping_user_id'];
    }

    /**
     * Sets shipping_user_id
     *
     * @param int $shipping_user_id The numeric ID of the user to which the seller ships the order.
     *
     * @return $this
     */
    public function setShippingUserId($shipping_user_id)
    {
        $this->container['shipping_user_id'] = $shipping_user_id;

        return $this;
    }

    /**
     * Gets shipping_address_id
     *
     * @return int
     */
    public function getShippingAddressId()
    {
        return $this->container['shipping_address_id'];
    }

    /**
     * Sets shipping_address_id
     *
     * @param int $shipping_address_id The numeric id identifying the shipping address.
     *
     * @return $this
     */
    public function setShippingAddressId($shipping_address_id)
    {
        $this->container['shipping_address_id'] = $shipping_address_id;

        return $this;
    }

    /**
     * Gets billing_address_id
     *
     * @return int
     */
    public function getBillingAddressId()
    {
        return $this->container['billing_address_id'];
    }

    /**
     * Sets billing_address_id
     *
     * @param int $billing_address_id The numeric ID identifying the billing address of the buyer.
     *
     * @return $this
     */
    public function setBillingAddressId($billing_address_id)
    {
        $this->container['billing_address_id'] = $billing_address_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets shipped_timestamp
     *
     * @return int
     */
    public function getShippedTimestamp()
    {
        return $this->container['shipped_timestamp'];
    }

    /**
     * Sets shipped_timestamp
     *
     * @param int $shipped_timestamp The transaction\\'s shipping date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setShippedTimestamp($shipped_timestamp)
    {
        $this->container['shipped_timestamp'] = $shipped_timestamp;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreateTimestamp($create_timestamp)
    {
        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return $this
     */
    public function setUpdateTimestamp($update_timestamp)
    {
        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets updated_timestamp
     *
     * @return int
     */
    public function getUpdatedTimestamp()
    {
        return $this->container['updated_timestamp'];
    }

    /**
     * Sets updated_timestamp
     *
     * @param int $updated_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return $this
     */
    public function setUpdatedTimestamp($updated_timestamp)
    {
        $this->container['updated_timestamp'] = $updated_timestamp;

        return $this;
    }

    /**
     * Gets payment_adjustments
     *
     * @return \Swagger\Client\Model\AllOfPaymentPaymentAdjustmentsItems[]
     */
    public function getPaymentAdjustments()
    {
        return $this->container['payment_adjustments'];
    }

    /**
     * Sets payment_adjustments
     *
     * @param \Swagger\Client\Model\AllOfPaymentPaymentAdjustmentsItems[] $payment_adjustments List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
     *
     * @return $this
     */
    public function setPaymentAdjustments($payment_adjustments)
    {
        $this->container['payment_adjustments'] = $payment_adjustments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
