<?php
/**
 * Shop
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Shop Class Doc Comment
 *
 * @category Class
 * @description A shop created by an Etsy user.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Shop implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Shop';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shop_id' => 'int',
'user_id' => 'int',
'shop_name' => 'string',
'create_date' => 'int',
'created_timestamp' => 'int',
'title' => 'string',
'announcement' => 'string',
'currency_code' => 'string',
'is_vacation' => 'bool',
'vacation_message' => 'string',
'sale_message' => 'string',
'digital_sale_message' => 'string',
'update_date' => 'int',
'updated_timestamp' => 'int',
'listing_active_count' => 'int',
'digital_listing_count' => 'int',
'login_name' => 'string',
'accepts_custom_requests' => 'bool',
'policy_welcome' => 'string',
'policy_payment' => 'string',
'policy_shipping' => 'string',
'policy_refunds' => 'string',
'policy_additional' => 'string',
'policy_seller_info' => 'string',
'policy_update_date' => 'int',
'policy_has_private_receipt_info' => 'bool',
'has_unstructured_policies' => 'bool',
'policy_privacy' => 'string',
'vacation_autoreply' => 'string',
'url' => 'string',
'image_url_760x100' => 'string',
'num_favorers' => 'int',
'languages' => 'string[]',
'icon_url_fullxfull' => 'string',
'is_using_structured_policies' => 'bool',
'has_onboarded_structured_policies' => 'bool',
'include_dispute_form_link' => 'bool',
'is_direct_checkout_onboarded' => 'bool',
'is_etsy_payments_onboarded' => 'bool',
'is_calculated_eligible' => 'bool',
'is_opted_in_to_buyer_promise' => 'bool',
'is_shop_us_based' => 'bool',
'transaction_sold_count' => 'int',
'shipping_from_country_iso' => 'string',
'shop_location_country_iso' => 'string',
'review_count' => 'int',
'review_average' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shop_id' => null,
'user_id' => null,
'shop_name' => null,
'create_date' => null,
'created_timestamp' => null,
'title' => null,
'announcement' => null,
'currency_code' => null,
'is_vacation' => null,
'vacation_message' => null,
'sale_message' => null,
'digital_sale_message' => null,
'update_date' => null,
'updated_timestamp' => null,
'listing_active_count' => null,
'digital_listing_count' => null,
'login_name' => null,
'accepts_custom_requests' => null,
'policy_welcome' => null,
'policy_payment' => null,
'policy_shipping' => null,
'policy_refunds' => null,
'policy_additional' => null,
'policy_seller_info' => null,
'policy_update_date' => null,
'policy_has_private_receipt_info' => null,
'has_unstructured_policies' => null,
'policy_privacy' => null,
'vacation_autoreply' => null,
'url' => null,
'image_url_760x100' => null,
'num_favorers' => null,
'languages' => null,
'icon_url_fullxfull' => null,
'is_using_structured_policies' => null,
'has_onboarded_structured_policies' => null,
'include_dispute_form_link' => null,
'is_direct_checkout_onboarded' => null,
'is_etsy_payments_onboarded' => null,
'is_calculated_eligible' => null,
'is_opted_in_to_buyer_promise' => null,
'is_shop_us_based' => null,
'transaction_sold_count' => null,
'shipping_from_country_iso' => 'ISO 3166-1 alpha-2',
'shop_location_country_iso' => 'ISO 3166-1 alpha-2',
'review_count' => null,
'review_average' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shop_id' => 'shop_id',
'user_id' => 'user_id',
'shop_name' => 'shop_name',
'create_date' => 'create_date',
'created_timestamp' => 'created_timestamp',
'title' => 'title',
'announcement' => 'announcement',
'currency_code' => 'currency_code',
'is_vacation' => 'is_vacation',
'vacation_message' => 'vacation_message',
'sale_message' => 'sale_message',
'digital_sale_message' => 'digital_sale_message',
'update_date' => 'update_date',
'updated_timestamp' => 'updated_timestamp',
'listing_active_count' => 'listing_active_count',
'digital_listing_count' => 'digital_listing_count',
'login_name' => 'login_name',
'accepts_custom_requests' => 'accepts_custom_requests',
'policy_welcome' => 'policy_welcome',
'policy_payment' => 'policy_payment',
'policy_shipping' => 'policy_shipping',
'policy_refunds' => 'policy_refunds',
'policy_additional' => 'policy_additional',
'policy_seller_info' => 'policy_seller_info',
'policy_update_date' => 'policy_update_date',
'policy_has_private_receipt_info' => 'policy_has_private_receipt_info',
'has_unstructured_policies' => 'has_unstructured_policies',
'policy_privacy' => 'policy_privacy',
'vacation_autoreply' => 'vacation_autoreply',
'url' => 'url',
'image_url_760x100' => 'image_url_760x100',
'num_favorers' => 'num_favorers',
'languages' => 'languages',
'icon_url_fullxfull' => 'icon_url_fullxfull',
'is_using_structured_policies' => 'is_using_structured_policies',
'has_onboarded_structured_policies' => 'has_onboarded_structured_policies',
'include_dispute_form_link' => 'include_dispute_form_link',
'is_direct_checkout_onboarded' => 'is_direct_checkout_onboarded',
'is_etsy_payments_onboarded' => 'is_etsy_payments_onboarded',
'is_calculated_eligible' => 'is_calculated_eligible',
'is_opted_in_to_buyer_promise' => 'is_opted_in_to_buyer_promise',
'is_shop_us_based' => 'is_shop_us_based',
'transaction_sold_count' => 'transaction_sold_count',
'shipping_from_country_iso' => 'shipping_from_country_iso',
'shop_location_country_iso' => 'shop_location_country_iso',
'review_count' => 'review_count',
'review_average' => 'review_average'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shop_id' => 'setShopId',
'user_id' => 'setUserId',
'shop_name' => 'setShopName',
'create_date' => 'setCreateDate',
'created_timestamp' => 'setCreatedTimestamp',
'title' => 'setTitle',
'announcement' => 'setAnnouncement',
'currency_code' => 'setCurrencyCode',
'is_vacation' => 'setIsVacation',
'vacation_message' => 'setVacationMessage',
'sale_message' => 'setSaleMessage',
'digital_sale_message' => 'setDigitalSaleMessage',
'update_date' => 'setUpdateDate',
'updated_timestamp' => 'setUpdatedTimestamp',
'listing_active_count' => 'setListingActiveCount',
'digital_listing_count' => 'setDigitalListingCount',
'login_name' => 'setLoginName',
'accepts_custom_requests' => 'setAcceptsCustomRequests',
'policy_welcome' => 'setPolicyWelcome',
'policy_payment' => 'setPolicyPayment',
'policy_shipping' => 'setPolicyShipping',
'policy_refunds' => 'setPolicyRefunds',
'policy_additional' => 'setPolicyAdditional',
'policy_seller_info' => 'setPolicySellerInfo',
'policy_update_date' => 'setPolicyUpdateDate',
'policy_has_private_receipt_info' => 'setPolicyHasPrivateReceiptInfo',
'has_unstructured_policies' => 'setHasUnstructuredPolicies',
'policy_privacy' => 'setPolicyPrivacy',
'vacation_autoreply' => 'setVacationAutoreply',
'url' => 'setUrl',
'image_url_760x100' => 'setImageUrl760x100',
'num_favorers' => 'setNumFavorers',
'languages' => 'setLanguages',
'icon_url_fullxfull' => 'setIconUrlFullxfull',
'is_using_structured_policies' => 'setIsUsingStructuredPolicies',
'has_onboarded_structured_policies' => 'setHasOnboardedStructuredPolicies',
'include_dispute_form_link' => 'setIncludeDisputeFormLink',
'is_direct_checkout_onboarded' => 'setIsDirectCheckoutOnboarded',
'is_etsy_payments_onboarded' => 'setIsEtsyPaymentsOnboarded',
'is_calculated_eligible' => 'setIsCalculatedEligible',
'is_opted_in_to_buyer_promise' => 'setIsOptedInToBuyerPromise',
'is_shop_us_based' => 'setIsShopUsBased',
'transaction_sold_count' => 'setTransactionSoldCount',
'shipping_from_country_iso' => 'setShippingFromCountryIso',
'shop_location_country_iso' => 'setShopLocationCountryIso',
'review_count' => 'setReviewCount',
'review_average' => 'setReviewAverage'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shop_id' => 'getShopId',
'user_id' => 'getUserId',
'shop_name' => 'getShopName',
'create_date' => 'getCreateDate',
'created_timestamp' => 'getCreatedTimestamp',
'title' => 'getTitle',
'announcement' => 'getAnnouncement',
'currency_code' => 'getCurrencyCode',
'is_vacation' => 'getIsVacation',
'vacation_message' => 'getVacationMessage',
'sale_message' => 'getSaleMessage',
'digital_sale_message' => 'getDigitalSaleMessage',
'update_date' => 'getUpdateDate',
'updated_timestamp' => 'getUpdatedTimestamp',
'listing_active_count' => 'getListingActiveCount',
'digital_listing_count' => 'getDigitalListingCount',
'login_name' => 'getLoginName',
'accepts_custom_requests' => 'getAcceptsCustomRequests',
'policy_welcome' => 'getPolicyWelcome',
'policy_payment' => 'getPolicyPayment',
'policy_shipping' => 'getPolicyShipping',
'policy_refunds' => 'getPolicyRefunds',
'policy_additional' => 'getPolicyAdditional',
'policy_seller_info' => 'getPolicySellerInfo',
'policy_update_date' => 'getPolicyUpdateDate',
'policy_has_private_receipt_info' => 'getPolicyHasPrivateReceiptInfo',
'has_unstructured_policies' => 'getHasUnstructuredPolicies',
'policy_privacy' => 'getPolicyPrivacy',
'vacation_autoreply' => 'getVacationAutoreply',
'url' => 'getUrl',
'image_url_760x100' => 'getImageUrl760x100',
'num_favorers' => 'getNumFavorers',
'languages' => 'getLanguages',
'icon_url_fullxfull' => 'getIconUrlFullxfull',
'is_using_structured_policies' => 'getIsUsingStructuredPolicies',
'has_onboarded_structured_policies' => 'getHasOnboardedStructuredPolicies',
'include_dispute_form_link' => 'getIncludeDisputeFormLink',
'is_direct_checkout_onboarded' => 'getIsDirectCheckoutOnboarded',
'is_etsy_payments_onboarded' => 'getIsEtsyPaymentsOnboarded',
'is_calculated_eligible' => 'getIsCalculatedEligible',
'is_opted_in_to_buyer_promise' => 'getIsOptedInToBuyerPromise',
'is_shop_us_based' => 'getIsShopUsBased',
'transaction_sold_count' => 'getTransactionSoldCount',
'shipping_from_country_iso' => 'getShippingFromCountryIso',
'shop_location_country_iso' => 'getShopLocationCountryIso',
'review_count' => 'getReviewCount',
'review_average' => 'getReviewAverage'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shop_id'] = isset($data['shop_id']) ? $data['shop_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['shop_name'] = isset($data['shop_name']) ? $data['shop_name'] : null;
        $this->container['create_date'] = isset($data['create_date']) ? $data['create_date'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['announcement'] = isset($data['announcement']) ? $data['announcement'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['is_vacation'] = isset($data['is_vacation']) ? $data['is_vacation'] : null;
        $this->container['vacation_message'] = isset($data['vacation_message']) ? $data['vacation_message'] : null;
        $this->container['sale_message'] = isset($data['sale_message']) ? $data['sale_message'] : null;
        $this->container['digital_sale_message'] = isset($data['digital_sale_message']) ? $data['digital_sale_message'] : null;
        $this->container['update_date'] = isset($data['update_date']) ? $data['update_date'] : null;
        $this->container['updated_timestamp'] = isset($data['updated_timestamp']) ? $data['updated_timestamp'] : null;
        $this->container['listing_active_count'] = isset($data['listing_active_count']) ? $data['listing_active_count'] : null;
        $this->container['digital_listing_count'] = isset($data['digital_listing_count']) ? $data['digital_listing_count'] : null;
        $this->container['login_name'] = isset($data['login_name']) ? $data['login_name'] : null;
        $this->container['accepts_custom_requests'] = isset($data['accepts_custom_requests']) ? $data['accepts_custom_requests'] : null;
        $this->container['policy_welcome'] = isset($data['policy_welcome']) ? $data['policy_welcome'] : null;
        $this->container['policy_payment'] = isset($data['policy_payment']) ? $data['policy_payment'] : null;
        $this->container['policy_shipping'] = isset($data['policy_shipping']) ? $data['policy_shipping'] : null;
        $this->container['policy_refunds'] = isset($data['policy_refunds']) ? $data['policy_refunds'] : null;
        $this->container['policy_additional'] = isset($data['policy_additional']) ? $data['policy_additional'] : null;
        $this->container['policy_seller_info'] = isset($data['policy_seller_info']) ? $data['policy_seller_info'] : null;
        $this->container['policy_update_date'] = isset($data['policy_update_date']) ? $data['policy_update_date'] : null;
        $this->container['policy_has_private_receipt_info'] = isset($data['policy_has_private_receipt_info']) ? $data['policy_has_private_receipt_info'] : null;
        $this->container['has_unstructured_policies'] = isset($data['has_unstructured_policies']) ? $data['has_unstructured_policies'] : null;
        $this->container['policy_privacy'] = isset($data['policy_privacy']) ? $data['policy_privacy'] : null;
        $this->container['vacation_autoreply'] = isset($data['vacation_autoreply']) ? $data['vacation_autoreply'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['image_url_760x100'] = isset($data['image_url_760x100']) ? $data['image_url_760x100'] : null;
        $this->container['num_favorers'] = isset($data['num_favorers']) ? $data['num_favorers'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['icon_url_fullxfull'] = isset($data['icon_url_fullxfull']) ? $data['icon_url_fullxfull'] : null;
        $this->container['is_using_structured_policies'] = isset($data['is_using_structured_policies']) ? $data['is_using_structured_policies'] : null;
        $this->container['has_onboarded_structured_policies'] = isset($data['has_onboarded_structured_policies']) ? $data['has_onboarded_structured_policies'] : null;
        $this->container['include_dispute_form_link'] = isset($data['include_dispute_form_link']) ? $data['include_dispute_form_link'] : null;
        $this->container['is_direct_checkout_onboarded'] = isset($data['is_direct_checkout_onboarded']) ? $data['is_direct_checkout_onboarded'] : null;
        $this->container['is_etsy_payments_onboarded'] = isset($data['is_etsy_payments_onboarded']) ? $data['is_etsy_payments_onboarded'] : null;
        $this->container['is_calculated_eligible'] = isset($data['is_calculated_eligible']) ? $data['is_calculated_eligible'] : null;
        $this->container['is_opted_in_to_buyer_promise'] = isset($data['is_opted_in_to_buyer_promise']) ? $data['is_opted_in_to_buyer_promise'] : null;
        $this->container['is_shop_us_based'] = isset($data['is_shop_us_based']) ? $data['is_shop_us_based'] : null;
        $this->container['transaction_sold_count'] = isset($data['transaction_sold_count']) ? $data['transaction_sold_count'] : null;
        $this->container['shipping_from_country_iso'] = isset($data['shipping_from_country_iso']) ? $data['shipping_from_country_iso'] : null;
        $this->container['shop_location_country_iso'] = isset($data['shop_location_country_iso']) ? $data['shop_location_country_iso'] : null;
        $this->container['review_count'] = isset($data['review_count']) ? $data['review_count'] : null;
        $this->container['review_average'] = isset($data['review_average']) ? $data['review_average'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return $this
     */
    public function setShopId($shop_id)
    {
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric user ID of the [user](/documentation/reference#tag/User) who owns this shop.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets shop_name
     *
     * @return string
     */
    public function getShopName()
    {
        return $this->container['shop_name'];
    }

    /**
     * Sets shop_name
     *
     * @param string $shop_name The shop's name string.
     *
     * @return $this
     */
    public function setShopName($shop_name)
    {
        $this->container['shop_name'] = $shop_name;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return int
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param int $create_date The date and time this shop was created, in epoch seconds.
     *
     * @return $this
     */
    public function setCreateDate($create_date)
    {
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The date and time this shop was created, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title A brief heading string for the shop\\'s main page.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets announcement
     *
     * @return string
     */
    public function getAnnouncement()
    {
        return $this->container['announcement'];
    }

    /**
     * Sets announcement
     *
     * @param string $announcement An announcement string to buyers that displays on the shop's homepage.
     *
     * @return $this
     */
    public function setAnnouncement($announcement)
    {
        $this->container['announcement'] = $announcement;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_vacation
     *
     * @return bool
     */
    public function getIsVacation()
    {
        return $this->container['is_vacation'];
    }

    /**
     * Sets is_vacation
     *
     * @param bool $is_vacation When true, this shop is not accepting purchases.
     *
     * @return $this
     */
    public function setIsVacation($is_vacation)
    {
        $this->container['is_vacation'] = $is_vacation;

        return $this;
    }

    /**
     * Gets vacation_message
     *
     * @return string
     */
    public function getVacationMessage()
    {
        return $this->container['vacation_message'];
    }

    /**
     * Sets vacation_message
     *
     * @param string $vacation_message The shop's message string displayed when `is_vacation` is true.
     *
     * @return $this
     */
    public function setVacationMessage($vacation_message)
    {
        $this->container['vacation_message'] = $vacation_message;

        return $this;
    }

    /**
     * Gets sale_message
     *
     * @return string
     */
    public function getSaleMessage()
    {
        return $this->container['sale_message'];
    }

    /**
     * Sets sale_message
     *
     * @param string $sale_message A message string sent to users who complete a purchase from this shop.
     *
     * @return $this
     */
    public function setSaleMessage($sale_message)
    {
        $this->container['sale_message'] = $sale_message;

        return $this;
    }

    /**
     * Gets digital_sale_message
     *
     * @return string
     */
    public function getDigitalSaleMessage()
    {
        return $this->container['digital_sale_message'];
    }

    /**
     * Sets digital_sale_message
     *
     * @param string $digital_sale_message A message string sent to users who purchase a digital item from this shop.
     *
     * @return $this
     */
    public function setDigitalSaleMessage($digital_sale_message)
    {
        $this->container['digital_sale_message'] = $digital_sale_message;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return int
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param int $update_date The date and time of the last update to the shop, in epoch seconds.
     *
     * @return $this
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets updated_timestamp
     *
     * @return int
     */
    public function getUpdatedTimestamp()
    {
        return $this->container['updated_timestamp'];
    }

    /**
     * Sets updated_timestamp
     *
     * @param int $updated_timestamp The date and time of the last update to the shop, in epoch seconds.
     *
     * @return $this
     */
    public function setUpdatedTimestamp($updated_timestamp)
    {
        $this->container['updated_timestamp'] = $updated_timestamp;

        return $this;
    }

    /**
     * Gets listing_active_count
     *
     * @return int
     */
    public function getListingActiveCount()
    {
        return $this->container['listing_active_count'];
    }

    /**
     * Sets listing_active_count
     *
     * @param int $listing_active_count The number of active listings in the shop.
     *
     * @return $this
     */
    public function setListingActiveCount($listing_active_count)
    {
        $this->container['listing_active_count'] = $listing_active_count;

        return $this;
    }

    /**
     * Gets digital_listing_count
     *
     * @return int
     */
    public function getDigitalListingCount()
    {
        return $this->container['digital_listing_count'];
    }

    /**
     * Sets digital_listing_count
     *
     * @param int $digital_listing_count The number of digital listings in the shop.
     *
     * @return $this
     */
    public function setDigitalListingCount($digital_listing_count)
    {
        $this->container['digital_listing_count'] = $digital_listing_count;

        return $this;
    }

    /**
     * Gets login_name
     *
     * @return string
     */
    public function getLoginName()
    {
        return $this->container['login_name'];
    }

    /**
     * Sets login_name
     *
     * @param string $login_name The shop owner\\'s login name string.
     *
     * @return $this
     */
    public function setLoginName($login_name)
    {
        $this->container['login_name'] = $login_name;

        return $this;
    }

    /**
     * Gets accepts_custom_requests
     *
     * @return bool
     */
    public function getAcceptsCustomRequests()
    {
        return $this->container['accepts_custom_requests'];
    }

    /**
     * Sets accepts_custom_requests
     *
     * @param bool $accepts_custom_requests When true, the shop accepts customization requests.
     *
     * @return $this
     */
    public function setAcceptsCustomRequests($accepts_custom_requests)
    {
        $this->container['accepts_custom_requests'] = $accepts_custom_requests;

        return $this;
    }

    /**
     * Gets policy_welcome
     *
     * @return string
     */
    public function getPolicyWelcome()
    {
        return $this->container['policy_welcome'];
    }

    /**
     * Sets policy_welcome
     *
     * @param string $policy_welcome The shop's policy welcome string (may be blank).
     *
     * @return $this
     */
    public function setPolicyWelcome($policy_welcome)
    {
        $this->container['policy_welcome'] = $policy_welcome;

        return $this;
    }

    /**
     * Gets policy_payment
     *
     * @return string
     */
    public function getPolicyPayment()
    {
        return $this->container['policy_payment'];
    }

    /**
     * Sets policy_payment
     *
     * @param string $policy_payment The shop's payment policy string (may be blank).
     *
     * @return $this
     */
    public function setPolicyPayment($policy_payment)
    {
        $this->container['policy_payment'] = $policy_payment;

        return $this;
    }

    /**
     * Gets policy_shipping
     *
     * @return string
     */
    public function getPolicyShipping()
    {
        return $this->container['policy_shipping'];
    }

    /**
     * Sets policy_shipping
     *
     * @param string $policy_shipping The shop's shipping policy string (may be blank).
     *
     * @return $this
     */
    public function setPolicyShipping($policy_shipping)
    {
        $this->container['policy_shipping'] = $policy_shipping;

        return $this;
    }

    /**
     * Gets policy_refunds
     *
     * @return string
     */
    public function getPolicyRefunds()
    {
        return $this->container['policy_refunds'];
    }

    /**
     * Sets policy_refunds
     *
     * @param string $policy_refunds The shop's refund policy string (may be blank).
     *
     * @return $this
     */
    public function setPolicyRefunds($policy_refunds)
    {
        $this->container['policy_refunds'] = $policy_refunds;

        return $this;
    }

    /**
     * Gets policy_additional
     *
     * @return string
     */
    public function getPolicyAdditional()
    {
        return $this->container['policy_additional'];
    }

    /**
     * Sets policy_additional
     *
     * @param string $policy_additional The shop's additional policies string (may be blank).
     *
     * @return $this
     */
    public function setPolicyAdditional($policy_additional)
    {
        $this->container['policy_additional'] = $policy_additional;

        return $this;
    }

    /**
     * Gets policy_seller_info
     *
     * @return string
     */
    public function getPolicySellerInfo()
    {
        return $this->container['policy_seller_info'];
    }

    /**
     * Sets policy_seller_info
     *
     * @param string $policy_seller_info The shop's seller information string (may be blank).
     *
     * @return $this
     */
    public function setPolicySellerInfo($policy_seller_info)
    {
        $this->container['policy_seller_info'] = $policy_seller_info;

        return $this;
    }

    /**
     * Gets policy_update_date
     *
     * @return int
     */
    public function getPolicyUpdateDate()
    {
        return $this->container['policy_update_date'];
    }

    /**
     * Sets policy_update_date
     *
     * @param int $policy_update_date The date and time of the last update to the shop's policies, in epoch seconds.
     *
     * @return $this
     */
    public function setPolicyUpdateDate($policy_update_date)
    {
        $this->container['policy_update_date'] = $policy_update_date;

        return $this;
    }

    /**
     * Gets policy_has_private_receipt_info
     *
     * @return bool
     */
    public function getPolicyHasPrivateReceiptInfo()
    {
        return $this->container['policy_has_private_receipt_info'];
    }

    /**
     * Sets policy_has_private_receipt_info
     *
     * @param bool $policy_has_private_receipt_info When true, EU receipts display private info.
     *
     * @return $this
     */
    public function setPolicyHasPrivateReceiptInfo($policy_has_private_receipt_info)
    {
        $this->container['policy_has_private_receipt_info'] = $policy_has_private_receipt_info;

        return $this;
    }

    /**
     * Gets has_unstructured_policies
     *
     * @return bool
     */
    public function getHasUnstructuredPolicies()
    {
        return $this->container['has_unstructured_policies'];
    }

    /**
     * Sets has_unstructured_policies
     *
     * @param bool $has_unstructured_policies When true, the shop displays additional unstructured policy fields.
     *
     * @return $this
     */
    public function setHasUnstructuredPolicies($has_unstructured_policies)
    {
        $this->container['has_unstructured_policies'] = $has_unstructured_policies;

        return $this;
    }

    /**
     * Gets policy_privacy
     *
     * @return string
     */
    public function getPolicyPrivacy()
    {
        return $this->container['policy_privacy'];
    }

    /**
     * Sets policy_privacy
     *
     * @param string $policy_privacy The shop's privacy policy string (may be blank).
     *
     * @return $this
     */
    public function setPolicyPrivacy($policy_privacy)
    {
        $this->container['policy_privacy'] = $policy_privacy;

        return $this;
    }

    /**
     * Gets vacation_autoreply
     *
     * @return string
     */
    public function getVacationAutoreply()
    {
        return $this->container['vacation_autoreply'];
    }

    /**
     * Sets vacation_autoreply
     *
     * @param string $vacation_autoreply The shop's automatic reply string displayed in new conversations when `is_vacation` is true.
     *
     * @return $this
     */
    public function setVacationAutoreply($vacation_autoreply)
    {
        $this->container['vacation_autoreply'] = $vacation_autoreply;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL string for this shop.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets image_url_760x100
     *
     * @return string
     */
    public function getImageUrl760x100()
    {
        return $this->container['image_url_760x100'];
    }

    /**
     * Sets image_url_760x100
     *
     * @param string $image_url_760x100 The URL string for this shop's banner image.
     *
     * @return $this
     */
    public function setImageUrl760x100($image_url_760x100)
    {
        $this->container['image_url_760x100'] = $image_url_760x100;

        return $this;
    }

    /**
     * Gets num_favorers
     *
     * @return int
     */
    public function getNumFavorers()
    {
        return $this->container['num_favorers'];
    }

    /**
     * Sets num_favorers
     *
     * @param int $num_favorers The number of users who marked this shop a favorite.
     *
     * @return $this
     */
    public function setNumFavorers($num_favorers)
    {
        $this->container['num_favorers'] = $num_favorers;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages A list of language strings for the shop's enrolled languages where the default shop language is the first element in the array.
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets icon_url_fullxfull
     *
     * @return string
     */
    public function getIconUrlFullxfull()
    {
        return $this->container['icon_url_fullxfull'];
    }

    /**
     * Sets icon_url_fullxfull
     *
     * @param string $icon_url_fullxfull The URL string for this shop's icon image.
     *
     * @return $this
     */
    public function setIconUrlFullxfull($icon_url_fullxfull)
    {
        $this->container['icon_url_fullxfull'] = $icon_url_fullxfull;

        return $this;
    }

    /**
     * Gets is_using_structured_policies
     *
     * @return bool
     */
    public function getIsUsingStructuredPolicies()
    {
        return $this->container['is_using_structured_policies'];
    }

    /**
     * Sets is_using_structured_policies
     *
     * @param bool $is_using_structured_policies When true, the shop accepted using structured policies.
     *
     * @return $this
     */
    public function setIsUsingStructuredPolicies($is_using_structured_policies)
    {
        $this->container['is_using_structured_policies'] = $is_using_structured_policies;

        return $this;
    }

    /**
     * Gets has_onboarded_structured_policies
     *
     * @return bool
     */
    public function getHasOnboardedStructuredPolicies()
    {
        return $this->container['has_onboarded_structured_policies'];
    }

    /**
     * Sets has_onboarded_structured_policies
     *
     * @param bool $has_onboarded_structured_policies When true, the shop accepted OR declined after viewing structured policies onboarding.
     *
     * @return $this
     */
    public function setHasOnboardedStructuredPolicies($has_onboarded_structured_policies)
    {
        $this->container['has_onboarded_structured_policies'] = $has_onboarded_structured_policies;

        return $this;
    }

    /**
     * Gets include_dispute_form_link
     *
     * @return bool
     */
    public function getIncludeDisputeFormLink()
    {
        return $this->container['include_dispute_form_link'];
    }

    /**
     * Sets include_dispute_form_link
     *
     * @param bool $include_dispute_form_link When true, this shop\\'s policies include a link to an EU online dispute form.
     *
     * @return $this
     */
    public function setIncludeDisputeFormLink($include_dispute_form_link)
    {
        $this->container['include_dispute_form_link'] = $include_dispute_form_link;

        return $this;
    }

    /**
     * Gets is_direct_checkout_onboarded
     *
     * @return bool
     */
    public function getIsDirectCheckoutOnboarded()
    {
        return $this->container['is_direct_checkout_onboarded'];
    }

    /**
     * Sets is_direct_checkout_onboarded
     *
     * @param bool $is_direct_checkout_onboarded (**DEPRECATED: Replaced by _is_etsy_payments_onboarded_.) When true, the shop has onboarded onto Etsy Payments.
     *
     * @return $this
     */
    public function setIsDirectCheckoutOnboarded($is_direct_checkout_onboarded)
    {
        $this->container['is_direct_checkout_onboarded'] = $is_direct_checkout_onboarded;

        return $this;
    }

    /**
     * Gets is_etsy_payments_onboarded
     *
     * @return bool
     */
    public function getIsEtsyPaymentsOnboarded()
    {
        return $this->container['is_etsy_payments_onboarded'];
    }

    /**
     * Sets is_etsy_payments_onboarded
     *
     * @param bool $is_etsy_payments_onboarded When true, the shop has onboarded onto Etsy Payments.
     *
     * @return $this
     */
    public function setIsEtsyPaymentsOnboarded($is_etsy_payments_onboarded)
    {
        $this->container['is_etsy_payments_onboarded'] = $is_etsy_payments_onboarded;

        return $this;
    }

    /**
     * Gets is_calculated_eligible
     *
     * @return bool
     */
    public function getIsCalculatedEligible()
    {
        return $this->container['is_calculated_eligible'];
    }

    /**
     * Sets is_calculated_eligible
     *
     * @param bool $is_calculated_eligible When true, the shop is eligible for calculated shipping profiles. (Only available in the US and Canada)
     *
     * @return $this
     */
    public function setIsCalculatedEligible($is_calculated_eligible)
    {
        $this->container['is_calculated_eligible'] = $is_calculated_eligible;

        return $this;
    }

    /**
     * Gets is_opted_in_to_buyer_promise
     *
     * @return bool
     */
    public function getIsOptedInToBuyerPromise()
    {
        return $this->container['is_opted_in_to_buyer_promise'];
    }

    /**
     * Sets is_opted_in_to_buyer_promise
     *
     * @param bool $is_opted_in_to_buyer_promise When true, the shop opted in to buyer promise.
     *
     * @return $this
     */
    public function setIsOptedInToBuyerPromise($is_opted_in_to_buyer_promise)
    {
        $this->container['is_opted_in_to_buyer_promise'] = $is_opted_in_to_buyer_promise;

        return $this;
    }

    /**
     * Gets is_shop_us_based
     *
     * @return bool
     */
    public function getIsShopUsBased()
    {
        return $this->container['is_shop_us_based'];
    }

    /**
     * Sets is_shop_us_based
     *
     * @param bool $is_shop_us_based When true, the shop is based in the US.
     *
     * @return $this
     */
    public function setIsShopUsBased($is_shop_us_based)
    {
        $this->container['is_shop_us_based'] = $is_shop_us_based;

        return $this;
    }

    /**
     * Gets transaction_sold_count
     *
     * @return int
     */
    public function getTransactionSoldCount()
    {
        return $this->container['transaction_sold_count'];
    }

    /**
     * Sets transaction_sold_count
     *
     * @param int $transaction_sold_count The total number of sales ([transactions](/documentation/reference#tag/Shop-Receipt-Transactions)) for this shop.
     *
     * @return $this
     */
    public function setTransactionSoldCount($transaction_sold_count)
    {
        $this->container['transaction_sold_count'] = $transaction_sold_count;

        return $this;
    }

    /**
     * Gets shipping_from_country_iso
     *
     * @return string
     */
    public function getShippingFromCountryIso()
    {
        return $this->container['shipping_from_country_iso'];
    }

    /**
     * Sets shipping_from_country_iso
     *
     * @param string $shipping_from_country_iso The country iso the shop is shipping from.
     *
     * @return $this
     */
    public function setShippingFromCountryIso($shipping_from_country_iso)
    {
        $this->container['shipping_from_country_iso'] = $shipping_from_country_iso;

        return $this;
    }

    /**
     * Gets shop_location_country_iso
     *
     * @return string
     */
    public function getShopLocationCountryIso()
    {
        return $this->container['shop_location_country_iso'];
    }

    /**
     * Sets shop_location_country_iso
     *
     * @param string $shop_location_country_iso The country iso where the shop is located.
     *
     * @return $this
     */
    public function setShopLocationCountryIso($shop_location_country_iso)
    {
        $this->container['shop_location_country_iso'] = $shop_location_country_iso;

        return $this;
    }

    /**
     * Gets review_count
     *
     * @return int
     */
    public function getReviewCount()
    {
        return $this->container['review_count'];
    }

    /**
     * Sets review_count
     *
     * @param int $review_count Number of reviews of shop listings in the past year.
     *
     * @return $this
     */
    public function setReviewCount($review_count)
    {
        $this->container['review_count'] = $review_count;

        return $this;
    }

    /**
     * Gets review_average
     *
     * @return float
     */
    public function getReviewAverage()
    {
        return $this->container['review_average'];
    }

    /**
     * Sets review_average
     *
     * @param float $review_average Average rating based on reviews of shop listings in the past year.
     *
     * @return $this
     */
    public function setReviewAverage($review_average)
    {
        $this->container['review_average'] = $review_average;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
