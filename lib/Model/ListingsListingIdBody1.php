<?php
/**
 * ListingsListingIdBody1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingsListingIdBody1 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingsListingIdBody1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'listings_listing_id_body_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'image_ids' => 'int[]',
'title' => 'string',
'description' => 'string',
'materials' => 'string[]',
'should_auto_renew' => 'bool',
'shipping_profile_id' => 'int',
'return_policy_id' => 'int',
'shop_section_id' => 'int',
'item_weight' => 'float',
'item_length' => 'float',
'item_width' => 'float',
'item_height' => 'float',
'item_weight_unit' => 'string',
'item_dimensions_unit' => 'string',
'is_taxable' => 'bool',
'taxonomy_id' => 'int',
'tags' => 'string[]',
'who_made' => 'string',
'when_made' => 'string',
'featured_rank' => 'int',
'is_personalizable' => 'bool',
'personalization_is_required' => 'bool',
'personalization_char_count_max' => 'int',
'personalization_instructions' => 'string',
'state' => 'string',
'is_supply' => 'bool',
'production_partner_ids' => 'int[]',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'image_ids' => null,
'title' => null,
'description' => null,
'materials' => null,
'should_auto_renew' => null,
'shipping_profile_id' => null,
'return_policy_id' => null,
'shop_section_id' => null,
'item_weight' => 'float',
'item_length' => 'float',
'item_width' => 'float',
'item_height' => 'float',
'item_weight_unit' => null,
'item_dimensions_unit' => null,
'is_taxable' => null,
'taxonomy_id' => null,
'tags' => null,
'who_made' => null,
'when_made' => null,
'featured_rank' => null,
'is_personalizable' => null,
'personalization_is_required' => null,
'personalization_char_count_max' => null,
'personalization_instructions' => null,
'state' => null,
'is_supply' => null,
'production_partner_ids' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'image_ids' => 'image_ids',
'title' => 'title',
'description' => 'description',
'materials' => 'materials',
'should_auto_renew' => 'should_auto_renew',
'shipping_profile_id' => 'shipping_profile_id',
'return_policy_id' => 'return_policy_id',
'shop_section_id' => 'shop_section_id',
'item_weight' => 'item_weight',
'item_length' => 'item_length',
'item_width' => 'item_width',
'item_height' => 'item_height',
'item_weight_unit' => 'item_weight_unit',
'item_dimensions_unit' => 'item_dimensions_unit',
'is_taxable' => 'is_taxable',
'taxonomy_id' => 'taxonomy_id',
'tags' => 'tags',
'who_made' => 'who_made',
'when_made' => 'when_made',
'featured_rank' => 'featured_rank',
'is_personalizable' => 'is_personalizable',
'personalization_is_required' => 'personalization_is_required',
'personalization_char_count_max' => 'personalization_char_count_max',
'personalization_instructions' => 'personalization_instructions',
'state' => 'state',
'is_supply' => 'is_supply',
'production_partner_ids' => 'production_partner_ids',
'type' => 'type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'image_ids' => 'setImageIds',
'title' => 'setTitle',
'description' => 'setDescription',
'materials' => 'setMaterials',
'should_auto_renew' => 'setShouldAutoRenew',
'shipping_profile_id' => 'setShippingProfileId',
'return_policy_id' => 'setReturnPolicyId',
'shop_section_id' => 'setShopSectionId',
'item_weight' => 'setItemWeight',
'item_length' => 'setItemLength',
'item_width' => 'setItemWidth',
'item_height' => 'setItemHeight',
'item_weight_unit' => 'setItemWeightUnit',
'item_dimensions_unit' => 'setItemDimensionsUnit',
'is_taxable' => 'setIsTaxable',
'taxonomy_id' => 'setTaxonomyId',
'tags' => 'setTags',
'who_made' => 'setWhoMade',
'when_made' => 'setWhenMade',
'featured_rank' => 'setFeaturedRank',
'is_personalizable' => 'setIsPersonalizable',
'personalization_is_required' => 'setPersonalizationIsRequired',
'personalization_char_count_max' => 'setPersonalizationCharCountMax',
'personalization_instructions' => 'setPersonalizationInstructions',
'state' => 'setState',
'is_supply' => 'setIsSupply',
'production_partner_ids' => 'setProductionPartnerIds',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'image_ids' => 'getImageIds',
'title' => 'getTitle',
'description' => 'getDescription',
'materials' => 'getMaterials',
'should_auto_renew' => 'getShouldAutoRenew',
'shipping_profile_id' => 'getShippingProfileId',
'return_policy_id' => 'getReturnPolicyId',
'shop_section_id' => 'getShopSectionId',
'item_weight' => 'getItemWeight',
'item_length' => 'getItemLength',
'item_width' => 'getItemWidth',
'item_height' => 'getItemHeight',
'item_weight_unit' => 'getItemWeightUnit',
'item_dimensions_unit' => 'getItemDimensionsUnit',
'is_taxable' => 'getIsTaxable',
'taxonomy_id' => 'getTaxonomyId',
'tags' => 'getTags',
'who_made' => 'getWhoMade',
'when_made' => 'getWhenMade',
'featured_rank' => 'getFeaturedRank',
'is_personalizable' => 'getIsPersonalizable',
'personalization_is_required' => 'getPersonalizationIsRequired',
'personalization_char_count_max' => 'getPersonalizationCharCountMax',
'personalization_instructions' => 'getPersonalizationInstructions',
'state' => 'getState',
'is_supply' => 'getIsSupply',
'production_partner_ids' => 'getProductionPartnerIds',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ITEM_WEIGHT_UNIT_EMPTY = '';
const ITEM_WEIGHT_UNIT_OZ = 'oz';
const ITEM_WEIGHT_UNIT_LB = 'lb';
const ITEM_WEIGHT_UNIT_G = 'g';
const ITEM_WEIGHT_UNIT_KG = 'kg';
const ITEM_DIMENSIONS_UNIT_EMPTY = '';
const ITEM_DIMENSIONS_UNIT_IN = 'in';
const ITEM_DIMENSIONS_UNIT_FT = 'ft';
const ITEM_DIMENSIONS_UNIT_MM = 'mm';
const ITEM_DIMENSIONS_UNIT_CM = 'cm';
const ITEM_DIMENSIONS_UNIT_M = 'm';
const ITEM_DIMENSIONS_UNIT_YD = 'yd';
const ITEM_DIMENSIONS_UNIT_INCHES = 'inches';
const WHO_MADE_I_DID = 'i_did';
const WHO_MADE_SOMEONE_ELSE = 'someone_else';
const WHO_MADE_COLLECTIVE = 'collective';
const WHEN_MADE_MADE_TO_ORDER = 'made_to_order';
const WHEN_MADE__2020_2023 = '2020_2023';
const WHEN_MADE__2010_2019 = '2010_2019';
const WHEN_MADE__2004_2009 = '2004_2009';
const WHEN_MADE_BEFORE_2004 = 'before_2004';
const WHEN_MADE__2000_2003 = '2000_2003';
const WHEN_MADE__1990S = '1990s';
const WHEN_MADE__1980S = '1980s';
const WHEN_MADE__1970S = '1970s';
const WHEN_MADE__1960S = '1960s';
const WHEN_MADE__1950S = '1950s';
const WHEN_MADE__1940S = '1940s';
const WHEN_MADE__1930S = '1930s';
const WHEN_MADE__1920S = '1920s';
const WHEN_MADE__1910S = '1910s';
const WHEN_MADE__1900S = '1900s';
const WHEN_MADE__1800S = '1800s';
const WHEN_MADE__1700S = '1700s';
const WHEN_MADE_BEFORE_1700 = 'before_1700';
const STATE_ACTIVE = 'active';
const STATE_INACTIVE = 'inactive';
const TYPE_PHYSICAL = 'physical';
const TYPE_DOWNLOAD = 'download';
const TYPE_BOTH = 'both';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemWeightUnitAllowableValues()
    {
        return [
            self::ITEM_WEIGHT_UNIT_EMPTY,
self::ITEM_WEIGHT_UNIT_OZ,
self::ITEM_WEIGHT_UNIT_LB,
self::ITEM_WEIGHT_UNIT_G,
self::ITEM_WEIGHT_UNIT_KG,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemDimensionsUnitAllowableValues()
    {
        return [
            self::ITEM_DIMENSIONS_UNIT_EMPTY,
self::ITEM_DIMENSIONS_UNIT_IN,
self::ITEM_DIMENSIONS_UNIT_FT,
self::ITEM_DIMENSIONS_UNIT_MM,
self::ITEM_DIMENSIONS_UNIT_CM,
self::ITEM_DIMENSIONS_UNIT_M,
self::ITEM_DIMENSIONS_UNIT_YD,
self::ITEM_DIMENSIONS_UNIT_INCHES,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhoMadeAllowableValues()
    {
        return [
            self::WHO_MADE_I_DID,
self::WHO_MADE_SOMEONE_ELSE,
self::WHO_MADE_COLLECTIVE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWhenMadeAllowableValues()
    {
        return [
            self::WHEN_MADE_MADE_TO_ORDER,
self::WHEN_MADE__2020_2023,
self::WHEN_MADE__2010_2019,
self::WHEN_MADE__2004_2009,
self::WHEN_MADE_BEFORE_2004,
self::WHEN_MADE__2000_2003,
self::WHEN_MADE__1990S,
self::WHEN_MADE__1980S,
self::WHEN_MADE__1970S,
self::WHEN_MADE__1960S,
self::WHEN_MADE__1950S,
self::WHEN_MADE__1940S,
self::WHEN_MADE__1930S,
self::WHEN_MADE__1920S,
self::WHEN_MADE__1910S,
self::WHEN_MADE__1900S,
self::WHEN_MADE__1800S,
self::WHEN_MADE__1700S,
self::WHEN_MADE_BEFORE_1700,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
self::STATE_INACTIVE,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PHYSICAL,
self::TYPE_DOWNLOAD,
self::TYPE_BOTH,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['image_ids'] = isset($data['image_ids']) ? $data['image_ids'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['materials'] = isset($data['materials']) ? $data['materials'] : null;
        $this->container['should_auto_renew'] = isset($data['should_auto_renew']) ? $data['should_auto_renew'] : null;
        $this->container['shipping_profile_id'] = isset($data['shipping_profile_id']) ? $data['shipping_profile_id'] : null;
        $this->container['return_policy_id'] = isset($data['return_policy_id']) ? $data['return_policy_id'] : null;
        $this->container['shop_section_id'] = isset($data['shop_section_id']) ? $data['shop_section_id'] : null;
        $this->container['item_weight'] = isset($data['item_weight']) ? $data['item_weight'] : null;
        $this->container['item_length'] = isset($data['item_length']) ? $data['item_length'] : null;
        $this->container['item_width'] = isset($data['item_width']) ? $data['item_width'] : null;
        $this->container['item_height'] = isset($data['item_height']) ? $data['item_height'] : null;
        $this->container['item_weight_unit'] = isset($data['item_weight_unit']) ? $data['item_weight_unit'] : null;
        $this->container['item_dimensions_unit'] = isset($data['item_dimensions_unit']) ? $data['item_dimensions_unit'] : null;
        $this->container['is_taxable'] = isset($data['is_taxable']) ? $data['is_taxable'] : null;
        $this->container['taxonomy_id'] = isset($data['taxonomy_id']) ? $data['taxonomy_id'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['who_made'] = isset($data['who_made']) ? $data['who_made'] : null;
        $this->container['when_made'] = isset($data['when_made']) ? $data['when_made'] : null;
        $this->container['featured_rank'] = isset($data['featured_rank']) ? $data['featured_rank'] : null;
        $this->container['is_personalizable'] = isset($data['is_personalizable']) ? $data['is_personalizable'] : null;
        $this->container['personalization_is_required'] = isset($data['personalization_is_required']) ? $data['personalization_is_required'] : null;
        $this->container['personalization_char_count_max'] = isset($data['personalization_char_count_max']) ? $data['personalization_char_count_max'] : null;
        $this->container['personalization_instructions'] = isset($data['personalization_instructions']) ? $data['personalization_instructions'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['is_supply'] = isset($data['is_supply']) ? $data['is_supply'] : null;
        $this->container['production_partner_ids'] = isset($data['production_partner_ids']) ? $data['production_partner_ids'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!is_null($this->container['item_weight_unit']) && !in_array($this->container['item_weight_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'item_weight_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!is_null($this->container['item_dimensions_unit']) && !in_array($this->container['item_dimensions_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'item_dimensions_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!is_null($this->container['who_made']) && !in_array($this->container['who_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'who_made', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!is_null($this->container['when_made']) && !in_array($this->container['when_made'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'when_made', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets image_ids
     *
     * @return int[]
     */
    public function getImageIds()
    {
        return $this->container['image_ids'];
    }

    /**
     * Sets image_ids
     *
     * @param int[] $image_ids An array of numeric image IDs of the images in a listing, which can include up to 10 images.
     *
     * @return $this
     */
    public function setImageIds($image_ids)
    {
        $this->container['image_ids'] = $image_ids;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The listing's title string. When creating or updating a listing, valid title strings contain only letters, numbers, punctuation marks, mathematical symbols, whitespace characters, ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{P}\\p{Sm}\\p{Zs}™©®]/u) You can only use the %, :, & and + characters once each.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description string of the product for sale in the listing.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets materials
     *
     * @return string[]
     */
    public function getMaterials()
    {
        return $this->container['materials'];
    }

    /**
     * Sets materials
     *
     * @param string[] $materials A list of material strings for materials used in the product. Valid materials strings contain only letters, numbers, and whitespace characters. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}]/u) Default value is null.
     *
     * @return $this
     */
    public function setMaterials($materials)
    {
        $this->container['materials'] = $materials;

        return $this;
    }

    /**
     * Gets should_auto_renew
     *
     * @return bool
     */
    public function getShouldAutoRenew()
    {
        return $this->container['should_auto_renew'];
    }

    /**
     * Sets should_auto_renew
     *
     * @param bool $should_auto_renew When true, renews a listing for four months upon expiration.
     *
     * @return $this
     */
    public function setShouldAutoRenew($should_auto_renew)
    {
        $this->container['should_auto_renew'] = $should_auto_renew;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
     *
     * @return $this
     */
    public function setShippingProfileId($shipping_profile_id)
    {
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets return_policy_id
     *
     * @return int
     */
    public function getReturnPolicyId()
    {
        return $this->container['return_policy_id'];
    }

    /**
     * Sets return_policy_id
     *
     * @param int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). Required for active physical listings. This requirement does not apply to listings of EU-based shops.
     *
     * @return $this
     */
    public function setReturnPolicyId($return_policy_id)
    {
        $this->container['return_policy_id'] = $return_policy_id;

        return $this;
    }

    /**
     * Gets shop_section_id
     *
     * @return int
     */
    public function getShopSectionId()
    {
        return $this->container['shop_section_id'];
    }

    /**
     * Sets shop_section_id
     *
     * @param int $shop_section_id The numeric ID of the [shop section](/documentation/reference#tag/Shop-Section) for this listing. Default value is null.
     *
     * @return $this
     */
    public function setShopSectionId($shop_section_id)
    {
        $this->container['shop_section_id'] = $shop_section_id;

        return $this;
    }

    /**
     * Gets item_weight
     *
     * @return float
     */
    public function getItemWeight()
    {
        return $this->container['item_weight'];
    }

    /**
     * Sets item_weight
     *
     * @param float $item_weight The numeric weight of the product measured in units set in 'item_weight_unit'. Default value is null. If set, the value must be greater than 0.
     *
     * @return $this
     */
    public function setItemWeight($item_weight)
    {
        $this->container['item_weight'] = $item_weight;

        return $this;
    }

    /**
     * Gets item_length
     *
     * @return float
     */
    public function getItemLength()
    {
        return $this->container['item_length'];
    }

    /**
     * Sets item_length
     *
     * @param float $item_length The numeric length of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
     *
     * @return $this
     */
    public function setItemLength($item_length)
    {
        $this->container['item_length'] = $item_length;

        return $this;
    }

    /**
     * Gets item_width
     *
     * @return float
     */
    public function getItemWidth()
    {
        return $this->container['item_width'];
    }

    /**
     * Sets item_width
     *
     * @param float $item_width The numeric width of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
     *
     * @return $this
     */
    public function setItemWidth($item_width)
    {
        $this->container['item_width'] = $item_width;

        return $this;
    }

    /**
     * Gets item_height
     *
     * @return float
     */
    public function getItemHeight()
    {
        return $this->container['item_height'];
    }

    /**
     * Sets item_height
     *
     * @param float $item_height The numeric height of the product measured in units set in 'item_dimensions_unit'. Default value is null. If set, the value must be greater than 0.
     *
     * @return $this
     */
    public function setItemHeight($item_height)
    {
        $this->container['item_height'] = $item_height;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string $item_weight_unit A string defining the units used to measure the weight of the product. Default value is null.
     *
     * @return $this
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        $allowedValues = $this->getItemWeightUnitAllowableValues();
        if (!is_null($item_weight_unit) && !in_array($item_weight_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'item_weight_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets item_dimensions_unit
     *
     * @return string
     */
    public function getItemDimensionsUnit()
    {
        return $this->container['item_dimensions_unit'];
    }

    /**
     * Sets item_dimensions_unit
     *
     * @param string $item_dimensions_unit A string defining the units used to measure the dimensions of the product. Default value is null.
     *
     * @return $this
     */
    public function setItemDimensionsUnit($item_dimensions_unit)
    {
        $allowedValues = $this->getItemDimensionsUnitAllowableValues();
        if (!is_null($item_dimensions_unit) && !in_array($item_dimensions_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'item_dimensions_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_dimensions_unit'] = $item_dimensions_unit;

        return $this;
    }

    /**
     * Gets is_taxable
     *
     * @return bool
     */
    public function getIsTaxable()
    {
        return $this->container['is_taxable'];
    }

    /**
     * Sets is_taxable
     *
     * @param bool $is_taxable When true, applicable [shop](/documentation/reference#tag/Shop) tax rates apply to this listing at checkout.
     *
     * @return $this
     */
    public function setIsTaxable($is_taxable)
    {
        $this->container['is_taxable'] = $is_taxable;

        return $this;
    }

    /**
     * Gets taxonomy_id
     *
     * @return int
     */
    public function getTaxonomyId()
    {
        return $this->container['taxonomy_id'];
    }

    /**
     * Sets taxonomy_id
     *
     * @param int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information.
     *
     * @return $this
     */
    public function setTaxonomyId($taxonomy_id)
    {
        $this->container['taxonomy_id'] = $taxonomy_id;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[] $tags A comma-separated list of tag strings for the listing. When creating or updating a listing, valid tag strings contain only letters, numbers, whitespace characters, -, ', ™, ©, and ®. (regex: /[^\\p{L}\\p{Nd}\\p{Zs}\\-'™©®]/u) Default value is null.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets who_made
     *
     * @return string
     */
    public function getWhoMade()
    {
        return $this->container['who_made'];
    }

    /**
     * Sets who_made
     *
     * @param string $who_made An enumerated string indicating who made the product. Helps buyers locate the listing under the Handmade heading. Requires 'is_supply' and 'when_made'.
     *
     * @return $this
     */
    public function setWhoMade($who_made)
    {
        $allowedValues = $this->getWhoMadeAllowableValues();
        if (!is_null($who_made) && !in_array($who_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'who_made', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['who_made'] = $who_made;

        return $this;
    }

    /**
     * Gets when_made
     *
     * @return string
     */
    public function getWhenMade()
    {
        return $this->container['when_made'];
    }

    /**
     * Sets when_made
     *
     * @param string $when_made An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
     *
     * @return $this
     */
    public function setWhenMade($when_made)
    {
        $allowedValues = $this->getWhenMadeAllowableValues();
        if (!is_null($when_made) && !in_array($when_made, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'when_made', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['when_made'] = $when_made;

        return $this;
    }

    /**
     * Gets featured_rank
     *
     * @return int
     */
    public function getFeaturedRank()
    {
        return $this->container['featured_rank'];
    }

    /**
     * Sets featured_rank
     *
     * @param int $featured_rank The positive non-zero numeric position in the featured listings of the shop, with rank 1 listings appearing in the left-most position in featured listing on a shop’s home page.
     *
     * @return $this
     */
    public function setFeaturedRank($featured_rank)
    {
        $this->container['featured_rank'] = $featured_rank;

        return $this;
    }

    /**
     * Gets is_personalizable
     *
     * @return bool
     */
    public function getIsPersonalizable()
    {
        return $this->container['is_personalizable'];
    }

    /**
     * Sets is_personalizable
     *
     * @param bool $is_personalizable When true, this listing is personalizable. The default value is null.
     *
     * @return $this
     */
    public function setIsPersonalizable($is_personalizable)
    {
        $this->container['is_personalizable'] = $is_personalizable;

        return $this;
    }

    /**
     * Gets personalization_is_required
     *
     * @return bool
     */
    public function getPersonalizationIsRequired()
    {
        return $this->container['personalization_is_required'];
    }

    /**
     * Sets personalization_is_required
     *
     * @param bool $personalization_is_required When true, this listing requires personalization. The default value is null. Will only change if is_personalizable is 'true'.
     *
     * @return $this
     */
    public function setPersonalizationIsRequired($personalization_is_required)
    {
        $this->container['personalization_is_required'] = $personalization_is_required;

        return $this;
    }

    /**
     * Gets personalization_char_count_max
     *
     * @return int
     */
    public function getPersonalizationCharCountMax()
    {
        return $this->container['personalization_char_count_max'];
    }

    /**
     * Sets personalization_char_count_max
     *
     * @param int $personalization_char_count_max This is an integer value representing the maximum length for the personalization message entered by the buyer. Will only change if is_personalizable is 'true'.
     *
     * @return $this
     */
    public function setPersonalizationCharCountMax($personalization_char_count_max)
    {
        $this->container['personalization_char_count_max'] = $personalization_char_count_max;

        return $this;
    }

    /**
     * Gets personalization_instructions
     *
     * @return string
     */
    public function getPersonalizationInstructions()
    {
        return $this->container['personalization_instructions'];
    }

    /**
     * Sets personalization_instructions
     *
     * @param string $personalization_instructions A string representing instructions for the buyer to enter the personalization. Will only change if is_personalizable is 'true'.
     *
     * @return $this
     */
    public function setPersonalizationInstructions($personalization_instructions)
    {
        $this->container['personalization_instructions'] = $personalization_instructions;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state When _updating_ a listing, this value can be either `active` or `inactive`. Note: Setting a `draft` listing to `active` will also publish the listing on etsy.com and requires that the listing have an image set. Setting a `sold_out` listing to active will update the quantity to 1 and renew the listing on etsy.com.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets is_supply
     *
     * @return bool
     */
    public function getIsSupply()
    {
        return $this->container['is_supply'];
    }

    /**
     * Sets is_supply
     *
     * @param bool $is_supply When true, tags the listing as a supply product, else indicates that it's a finished product. Helps buyers locate the listing under the Supplies heading. Requires 'who_made' and 'when_made'.
     *
     * @return $this
     */
    public function setIsSupply($is_supply)
    {
        $this->container['is_supply'] = $is_supply;

        return $this;
    }

    /**
     * Gets production_partner_ids
     *
     * @return int[]
     */
    public function getProductionPartnerIds()
    {
        return $this->container['production_partner_ids'];
    }

    /**
     * Sets production_partner_ids
     *
     * @param int[] $production_partner_ids An array of unique IDs of production partner ids.
     *
     * @return $this
     */
    public function setProductionPartnerIds($production_partner_ids)
    {
        $this->container['production_partner_ids'] = $production_partner_ids;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type An enumerated type string that indicates whether the listing is physical or a digital download.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
