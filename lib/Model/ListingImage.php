<?php
/**
 * ListingImage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ListingImage Class Doc Comment
 *
 * @category Class
 * @description Reference urls and metadata for an image associated with a specific listing. The &#x60;url_fullxfull&#x60; parameter contains the URL for full-sized binary image file.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListingImage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListingImage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listing_id' => 'int',
'listing_image_id' => 'int',
'hex_code' => 'string',
'red' => 'int',
'green' => 'int',
'blue' => 'int',
'hue' => 'int',
'saturation' => 'int',
'brightness' => 'int',
'is_black_and_white' => 'bool',
'creation_tsz' => 'int',
'created_timestamp' => 'int',
'rank' => 'int',
'url_75x75' => 'string',
'url_170x135' => 'string',
'url_570x_n' => 'string',
'url_fullxfull' => 'string',
'full_height' => 'int',
'full_width' => 'int',
'alt_text' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listing_id' => null,
'listing_image_id' => null,
'hex_code' => null,
'red' => null,
'green' => null,
'blue' => null,
'hue' => null,
'saturation' => null,
'brightness' => null,
'is_black_and_white' => null,
'creation_tsz' => null,
'created_timestamp' => null,
'rank' => null,
'url_75x75' => null,
'url_170x135' => null,
'url_570x_n' => null,
'url_fullxfull' => null,
'full_height' => null,
'full_width' => null,
'alt_text' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listing_id' => 'listing_id',
'listing_image_id' => 'listing_image_id',
'hex_code' => 'hex_code',
'red' => 'red',
'green' => 'green',
'blue' => 'blue',
'hue' => 'hue',
'saturation' => 'saturation',
'brightness' => 'brightness',
'is_black_and_white' => 'is_black_and_white',
'creation_tsz' => 'creation_tsz',
'created_timestamp' => 'created_timestamp',
'rank' => 'rank',
'url_75x75' => 'url_75x75',
'url_170x135' => 'url_170x135',
'url_570x_n' => 'url_570xN',
'url_fullxfull' => 'url_fullxfull',
'full_height' => 'full_height',
'full_width' => 'full_width',
'alt_text' => 'alt_text'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listing_id' => 'setListingId',
'listing_image_id' => 'setListingImageId',
'hex_code' => 'setHexCode',
'red' => 'setRed',
'green' => 'setGreen',
'blue' => 'setBlue',
'hue' => 'setHue',
'saturation' => 'setSaturation',
'brightness' => 'setBrightness',
'is_black_and_white' => 'setIsBlackAndWhite',
'creation_tsz' => 'setCreationTsz',
'created_timestamp' => 'setCreatedTimestamp',
'rank' => 'setRank',
'url_75x75' => 'setUrl75x75',
'url_170x135' => 'setUrl170x135',
'url_570x_n' => 'setUrl570xN',
'url_fullxfull' => 'setUrlFullxfull',
'full_height' => 'setFullHeight',
'full_width' => 'setFullWidth',
'alt_text' => 'setAltText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listing_id' => 'getListingId',
'listing_image_id' => 'getListingImageId',
'hex_code' => 'getHexCode',
'red' => 'getRed',
'green' => 'getGreen',
'blue' => 'getBlue',
'hue' => 'getHue',
'saturation' => 'getSaturation',
'brightness' => 'getBrightness',
'is_black_and_white' => 'getIsBlackAndWhite',
'creation_tsz' => 'getCreationTsz',
'created_timestamp' => 'getCreatedTimestamp',
'rank' => 'getRank',
'url_75x75' => 'getUrl75x75',
'url_170x135' => 'getUrl170x135',
'url_570x_n' => 'getUrl570xN',
'url_fullxfull' => 'getUrlFullxfull',
'full_height' => 'getFullHeight',
'full_width' => 'getFullWidth',
'alt_text' => 'getAltText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['listing_image_id'] = isset($data['listing_image_id']) ? $data['listing_image_id'] : null;
        $this->container['hex_code'] = isset($data['hex_code']) ? $data['hex_code'] : null;
        $this->container['red'] = isset($data['red']) ? $data['red'] : null;
        $this->container['green'] = isset($data['green']) ? $data['green'] : null;
        $this->container['blue'] = isset($data['blue']) ? $data['blue'] : null;
        $this->container['hue'] = isset($data['hue']) ? $data['hue'] : null;
        $this->container['saturation'] = isset($data['saturation']) ? $data['saturation'] : null;
        $this->container['brightness'] = isset($data['brightness']) ? $data['brightness'] : null;
        $this->container['is_black_and_white'] = isset($data['is_black_and_white']) ? $data['is_black_and_white'] : null;
        $this->container['creation_tsz'] = isset($data['creation_tsz']) ? $data['creation_tsz'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['rank'] = isset($data['rank']) ? $data['rank'] : null;
        $this->container['url_75x75'] = isset($data['url_75x75']) ? $data['url_75x75'] : null;
        $this->container['url_170x135'] = isset($data['url_170x135']) ? $data['url_170x135'] : null;
        $this->container['url_570x_n'] = isset($data['url_570x_n']) ? $data['url_570x_n'] : null;
        $this->container['url_fullxfull'] = isset($data['url_fullxfull']) ? $data['url_fullxfull'] : null;
        $this->container['full_height'] = isset($data['full_height']) ? $data['full_height'] : null;
        $this->container['full_width'] = isset($data['full_width']) ? $data['full_width'] : null;
        $this->container['alt_text'] = isset($data['alt_text']) ? $data['alt_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets listing_image_id
     *
     * @return int
     */
    public function getListingImageId()
    {
        return $this->container['listing_image_id'];
    }

    /**
     * Sets listing_image_id
     *
     * @param int $listing_image_id The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
     *
     * @return $this
     */
    public function setListingImageId($listing_image_id)
    {
        $this->container['listing_image_id'] = $listing_image_id;

        return $this;
    }

    /**
     * Gets hex_code
     *
     * @return string
     */
    public function getHexCode()
    {
        return $this->container['hex_code'];
    }

    /**
     * Sets hex_code
     *
     * @param string $hex_code The webhex string for the image's average color, in webhex notation.
     *
     * @return $this
     */
    public function setHexCode($hex_code)
    {
        $this->container['hex_code'] = $hex_code;

        return $this;
    }

    /**
     * Gets red
     *
     * @return int
     */
    public function getRed()
    {
        return $this->container['red'];
    }

    /**
     * Sets red
     *
     * @param int $red The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return $this
     */
    public function setRed($red)
    {
        $this->container['red'] = $red;

        return $this;
    }

    /**
     * Gets green
     *
     * @return int
     */
    public function getGreen()
    {
        return $this->container['green'];
    }

    /**
     * Sets green
     *
     * @param int $green The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return $this
     */
    public function setGreen($green)
    {
        $this->container['green'] = $green;

        return $this;
    }

    /**
     * Gets blue
     *
     * @return int
     */
    public function getBlue()
    {
        return $this->container['blue'];
    }

    /**
     * Sets blue
     *
     * @param int $blue The numeric red value equal to the image's average red value, from 0-255 (RGB color).
     *
     * @return $this
     */
    public function setBlue($blue)
    {
        $this->container['blue'] = $blue;

        return $this;
    }

    /**
     * Gets hue
     *
     * @return int
     */
    public function getHue()
    {
        return $this->container['hue'];
    }

    /**
     * Sets hue
     *
     * @param int $hue The numeric hue equal to the image's average hue, from 0-360 (HSV color).
     *
     * @return $this
     */
    public function setHue($hue)
    {
        $this->container['hue'] = $hue;

        return $this;
    }

    /**
     * Gets saturation
     *
     * @return int
     */
    public function getSaturation()
    {
        return $this->container['saturation'];
    }

    /**
     * Sets saturation
     *
     * @param int $saturation The numeric saturation equal to the image's average saturation, from 0-100 (HSV color).
     *
     * @return $this
     */
    public function setSaturation($saturation)
    {
        $this->container['saturation'] = $saturation;

        return $this;
    }

    /**
     * Gets brightness
     *
     * @return int
     */
    public function getBrightness()
    {
        return $this->container['brightness'];
    }

    /**
     * Sets brightness
     *
     * @param int $brightness The numeric brightness equal to the image's average brightness, from 0-100 (HSV color).
     *
     * @return $this
     */
    public function setBrightness($brightness)
    {
        $this->container['brightness'] = $brightness;

        return $this;
    }

    /**
     * Gets is_black_and_white
     *
     * @return bool
     */
    public function getIsBlackAndWhite()
    {
        return $this->container['is_black_and_white'];
    }

    /**
     * Sets is_black_and_white
     *
     * @param bool $is_black_and_white When true, the image is in black & white.
     *
     * @return $this
     */
    public function setIsBlackAndWhite($is_black_and_white)
    {
        $this->container['is_black_and_white'] = $is_black_and_white;

        return $this;
    }

    /**
     * Gets creation_tsz
     *
     * @return int
     */
    public function getCreationTsz()
    {
        return $this->container['creation_tsz'];
    }

    /**
     * Sets creation_tsz
     *
     * @param int $creation_tsz The listing image\\'s creation time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreationTsz($creation_tsz)
    {
        $this->container['creation_tsz'] = $creation_tsz;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The listing image\\'s creation time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return int
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param int $rank The positive non-zero numeric position in the images displayed in a listing, with rank 1 images appearing in the left-most position in a listing.
     *
     * @return $this
     */
    public function setRank($rank)
    {
        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets url_75x75
     *
     * @return string
     */
    public function getUrl75x75()
    {
        return $this->container['url_75x75'];
    }

    /**
     * Sets url_75x75
     *
     * @param string $url_75x75 The url string for a 75x75 pixel thumbnail of the image.
     *
     * @return $this
     */
    public function setUrl75x75($url_75x75)
    {
        $this->container['url_75x75'] = $url_75x75;

        return $this;
    }

    /**
     * Gets url_170x135
     *
     * @return string
     */
    public function getUrl170x135()
    {
        return $this->container['url_170x135'];
    }

    /**
     * Sets url_170x135
     *
     * @param string $url_170x135 The url string for a 170x135 pixel thumbnail of the image.
     *
     * @return $this
     */
    public function setUrl170x135($url_170x135)
    {
        $this->container['url_170x135'] = $url_170x135;

        return $this;
    }

    /**
     * Gets url_570x_n
     *
     * @return string
     */
    public function getUrl570xN()
    {
        return $this->container['url_570x_n'];
    }

    /**
     * Sets url_570x_n
     *
     * @param string $url_570x_n The url string for a thumbnail of the image, no more than 570 pixels wide with variable height.
     *
     * @return $this
     */
    public function setUrl570xN($url_570x_n)
    {
        $this->container['url_570x_n'] = $url_570x_n;

        return $this;
    }

    /**
     * Gets url_fullxfull
     *
     * @return string
     */
    public function getUrlFullxfull()
    {
        return $this->container['url_fullxfull'];
    }

    /**
     * Sets url_fullxfull
     *
     * @param string $url_fullxfull The url string for the full-size image, up to 3000 pixels in each dimension.
     *
     * @return $this
     */
    public function setUrlFullxfull($url_fullxfull)
    {
        $this->container['url_fullxfull'] = $url_fullxfull;

        return $this;
    }

    /**
     * Gets full_height
     *
     * @return int
     */
    public function getFullHeight()
    {
        return $this->container['full_height'];
    }

    /**
     * Sets full_height
     *
     * @param int $full_height The numeric height, measured in pixels, of the full-sized image referenced in url_fullxfull.
     *
     * @return $this
     */
    public function setFullHeight($full_height)
    {
        $this->container['full_height'] = $full_height;

        return $this;
    }

    /**
     * Gets full_width
     *
     * @return int
     */
    public function getFullWidth()
    {
        return $this->container['full_width'];
    }

    /**
     * Sets full_width
     *
     * @param int $full_width The numeric width, measured in pixels, of the full-sized image referenced in url_fullxfull.
     *
     * @return $this
     */
    public function setFullWidth($full_width)
    {
        $this->container['full_width'] = $full_width;

        return $this;
    }

    /**
     * Gets alt_text
     *
     * @return string
     */
    public function getAltText()
    {
        return $this->container['alt_text'];
    }

    /**
     * Sets alt_text
     *
     * @param string $alt_text Alt text for the listing image.
     *
     * @return $this
     */
    public function setAltText($alt_text)
    {
        $this->container['alt_text'] = $alt_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
