<?php
/**
 * ShopReceiptTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShopReceiptTransaction Class Doc Comment
 *
 * @category Class
 * @description A transaction object associated with a shop receipt. Etsy generates one transaction per listing purchased as recorded on the order receipt.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopReceiptTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShopReceiptTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_id' => 'int',
'title' => 'string',
'description' => 'string',
'seller_user_id' => 'int',
'buyer_user_id' => 'int',
'create_timestamp' => 'int',
'created_timestamp' => 'int',
'paid_timestamp' => 'int',
'shipped_timestamp' => 'int',
'quantity' => 'int',
'listing_image_id' => 'int',
'receipt_id' => 'int',
'is_digital' => 'bool',
'file_data' => 'string',
'listing_id' => 'int',
'transaction_type' => 'string',
'product_id' => 'int',
'sku' => 'string',
'price' => 'AllOfShopReceiptTransactionPrice',
'shipping_cost' => 'AllOfShopReceiptTransactionShippingCost',
'variations' => '\Swagger\Client\Model\AllOfShopReceiptTransactionVariationsItems[]',
'product_data' => '\Swagger\Client\Model\AllOfShopReceiptTransactionProductDataItems[]',
'shipping_profile_id' => 'int',
'min_processing_days' => 'int',
'max_processing_days' => 'int',
'shipping_method' => 'string',
'shipping_upgrade' => 'string',
'expected_ship_date' => 'int',
'buyer_coupon' => 'float',
'shop_coupon' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_id' => null,
'title' => null,
'description' => null,
'seller_user_id' => null,
'buyer_user_id' => null,
'create_timestamp' => null,
'created_timestamp' => null,
'paid_timestamp' => null,
'shipped_timestamp' => null,
'quantity' => null,
'listing_image_id' => null,
'receipt_id' => null,
'is_digital' => null,
'file_data' => null,
'listing_id' => null,
'transaction_type' => null,
'product_id' => null,
'sku' => null,
'price' => null,
'shipping_cost' => null,
'variations' => null,
'product_data' => null,
'shipping_profile_id' => null,
'min_processing_days' => null,
'max_processing_days' => null,
'shipping_method' => null,
'shipping_upgrade' => null,
'expected_ship_date' => null,
'buyer_coupon' => 'float',
'shop_coupon' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transaction_id',
'title' => 'title',
'description' => 'description',
'seller_user_id' => 'seller_user_id',
'buyer_user_id' => 'buyer_user_id',
'create_timestamp' => 'create_timestamp',
'created_timestamp' => 'created_timestamp',
'paid_timestamp' => 'paid_timestamp',
'shipped_timestamp' => 'shipped_timestamp',
'quantity' => 'quantity',
'listing_image_id' => 'listing_image_id',
'receipt_id' => 'receipt_id',
'is_digital' => 'is_digital',
'file_data' => 'file_data',
'listing_id' => 'listing_id',
'transaction_type' => 'transaction_type',
'product_id' => 'product_id',
'sku' => 'sku',
'price' => 'price',
'shipping_cost' => 'shipping_cost',
'variations' => 'variations',
'product_data' => 'product_data',
'shipping_profile_id' => 'shipping_profile_id',
'min_processing_days' => 'min_processing_days',
'max_processing_days' => 'max_processing_days',
'shipping_method' => 'shipping_method',
'shipping_upgrade' => 'shipping_upgrade',
'expected_ship_date' => 'expected_ship_date',
'buyer_coupon' => 'buyer_coupon',
'shop_coupon' => 'shop_coupon'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
'title' => 'setTitle',
'description' => 'setDescription',
'seller_user_id' => 'setSellerUserId',
'buyer_user_id' => 'setBuyerUserId',
'create_timestamp' => 'setCreateTimestamp',
'created_timestamp' => 'setCreatedTimestamp',
'paid_timestamp' => 'setPaidTimestamp',
'shipped_timestamp' => 'setShippedTimestamp',
'quantity' => 'setQuantity',
'listing_image_id' => 'setListingImageId',
'receipt_id' => 'setReceiptId',
'is_digital' => 'setIsDigital',
'file_data' => 'setFileData',
'listing_id' => 'setListingId',
'transaction_type' => 'setTransactionType',
'product_id' => 'setProductId',
'sku' => 'setSku',
'price' => 'setPrice',
'shipping_cost' => 'setShippingCost',
'variations' => 'setVariations',
'product_data' => 'setProductData',
'shipping_profile_id' => 'setShippingProfileId',
'min_processing_days' => 'setMinProcessingDays',
'max_processing_days' => 'setMaxProcessingDays',
'shipping_method' => 'setShippingMethod',
'shipping_upgrade' => 'setShippingUpgrade',
'expected_ship_date' => 'setExpectedShipDate',
'buyer_coupon' => 'setBuyerCoupon',
'shop_coupon' => 'setShopCoupon'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
'title' => 'getTitle',
'description' => 'getDescription',
'seller_user_id' => 'getSellerUserId',
'buyer_user_id' => 'getBuyerUserId',
'create_timestamp' => 'getCreateTimestamp',
'created_timestamp' => 'getCreatedTimestamp',
'paid_timestamp' => 'getPaidTimestamp',
'shipped_timestamp' => 'getShippedTimestamp',
'quantity' => 'getQuantity',
'listing_image_id' => 'getListingImageId',
'receipt_id' => 'getReceiptId',
'is_digital' => 'getIsDigital',
'file_data' => 'getFileData',
'listing_id' => 'getListingId',
'transaction_type' => 'getTransactionType',
'product_id' => 'getProductId',
'sku' => 'getSku',
'price' => 'getPrice',
'shipping_cost' => 'getShippingCost',
'variations' => 'getVariations',
'product_data' => 'getProductData',
'shipping_profile_id' => 'getShippingProfileId',
'min_processing_days' => 'getMinProcessingDays',
'max_processing_days' => 'getMaxProcessingDays',
'shipping_method' => 'getShippingMethod',
'shipping_upgrade' => 'getShippingUpgrade',
'expected_ship_date' => 'getExpectedShipDate',
'buyer_coupon' => 'getBuyerCoupon',
'shop_coupon' => 'getShopCoupon'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['seller_user_id'] = isset($data['seller_user_id']) ? $data['seller_user_id'] : null;
        $this->container['buyer_user_id'] = isset($data['buyer_user_id']) ? $data['buyer_user_id'] : null;
        $this->container['create_timestamp'] = isset($data['create_timestamp']) ? $data['create_timestamp'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['paid_timestamp'] = isset($data['paid_timestamp']) ? $data['paid_timestamp'] : null;
        $this->container['shipped_timestamp'] = isset($data['shipped_timestamp']) ? $data['shipped_timestamp'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['listing_image_id'] = isset($data['listing_image_id']) ? $data['listing_image_id'] : null;
        $this->container['receipt_id'] = isset($data['receipt_id']) ? $data['receipt_id'] : null;
        $this->container['is_digital'] = isset($data['is_digital']) ? $data['is_digital'] : null;
        $this->container['file_data'] = isset($data['file_data']) ? $data['file_data'] : null;
        $this->container['listing_id'] = isset($data['listing_id']) ? $data['listing_id'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['shipping_cost'] = isset($data['shipping_cost']) ? $data['shipping_cost'] : null;
        $this->container['variations'] = isset($data['variations']) ? $data['variations'] : null;
        $this->container['product_data'] = isset($data['product_data']) ? $data['product_data'] : null;
        $this->container['shipping_profile_id'] = isset($data['shipping_profile_id']) ? $data['shipping_profile_id'] : null;
        $this->container['min_processing_days'] = isset($data['min_processing_days']) ? $data['min_processing_days'] : null;
        $this->container['max_processing_days'] = isset($data['max_processing_days']) ? $data['max_processing_days'] : null;
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['shipping_upgrade'] = isset($data['shipping_upgrade']) ? $data['shipping_upgrade'] : null;
        $this->container['expected_ship_date'] = isset($data['expected_ship_date']) ? $data['expected_ship_date'] : null;
        $this->container['buyer_coupon'] = isset($data['buyer_coupon']) ? $data['buyer_coupon'] : 0;
        $this->container['shop_coupon'] = isset($data['shop_coupon']) ? $data['shop_coupon'] : 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return int
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param int $transaction_id The unique numeric ID for a transaction.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description string of the [listing](/documentation/reference#tag/ShopListing) purchased in this transaction.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets seller_user_id
     *
     * @return int
     */
    public function getSellerUserId()
    {
        return $this->container['seller_user_id'];
    }

    /**
     * Sets seller_user_id
     *
     * @param int $seller_user_id The numeric user ID for the seller in this transaction.
     *
     * @return $this
     */
    public function setSellerUserId($seller_user_id)
    {
        $this->container['seller_user_id'] = $seller_user_id;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return int
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param int $buyer_user_id The numeric user ID for the buyer in this transaction.
     *
     * @return $this
     */
    public function setBuyerUserId($buyer_user_id)
    {
        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreateTimestamp($create_timestamp)
    {
        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets paid_timestamp
     *
     * @return int
     */
    public function getPaidTimestamp()
    {
        return $this->container['paid_timestamp'];
    }

    /**
     * Sets paid_timestamp
     *
     * @param int $paid_timestamp The transaction\\'s paid date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setPaidTimestamp($paid_timestamp)
    {
        $this->container['paid_timestamp'] = $paid_timestamp;

        return $this;
    }

    /**
     * Gets shipped_timestamp
     *
     * @return int
     */
    public function getShippedTimestamp()
    {
        return $this->container['shipped_timestamp'];
    }

    /**
     * Sets shipped_timestamp
     *
     * @param int $shipped_timestamp The transaction\\'s shipping date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setShippedTimestamp($shipped_timestamp)
    {
        $this->container['shipped_timestamp'] = $shipped_timestamp;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The numeric quantity of products purchased in this transaction.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets listing_image_id
     *
     * @return int
     */
    public function getListingImageId()
    {
        return $this->container['listing_image_id'];
    }

    /**
     * Sets listing_image_id
     *
     * @param int $listing_image_id The numeric ID of the primary [listing image](/documentation/reference#tag/ShopListing-Image) for this transaction.
     *
     * @return $this
     */
    public function setListingImageId($listing_image_id)
    {
        $this->container['listing_image_id'] = $listing_image_id;

        return $this;
    }

    /**
     * Gets receipt_id
     *
     * @return int
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     *
     * @return $this
     */
    public function setReceiptId($receipt_id)
    {
        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets is_digital
     *
     * @return bool
     */
    public function getIsDigital()
    {
        return $this->container['is_digital'];
    }

    /**
     * Sets is_digital
     *
     * @param bool $is_digital When true, the transaction recorded the purchase of a digital listing.
     *
     * @return $this
     */
    public function setIsDigital($is_digital)
    {
        $this->container['is_digital'] = $is_digital;

        return $this;
    }

    /**
     * Gets file_data
     *
     * @return string
     */
    public function getFileData()
    {
        return $this->container['file_data'];
    }

    /**
     * Sets file_data
     *
     * @param string $file_data A string describing the files purchased in this transaction.
     *
     * @return $this
     */
    public function setFileData($file_data)
    {
        $this->container['file_data'] = $file_data;

        return $this;
    }

    /**
     * Gets listing_id
     *
     * @return int
     */
    public function getListingId()
    {
        return $this->container['listing_id'];
    }

    /**
     * Sets listing_id
     *
     * @param int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction.
     *
     * @return $this
     */
    public function setListingId($listing_id)
    {
        $this->container['listing_id'] = $listing_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type The type string for the transaction, usually \"listing\".
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku The SKU string for the product
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets price
     *
     * @return AllOfShopReceiptTransactionPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param AllOfShopReceiptTransactionPrice $price A money object representing the price recorded the transaction.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return AllOfShopReceiptTransactionShippingCost
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param AllOfShopReceiptTransactionShippingCost $shipping_cost A money object representing the shipping cost for this transaction.
     *
     * @return $this
     */
    public function setShippingCost($shipping_cost)
    {
        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets variations
     *
     * @return \Swagger\Client\Model\AllOfShopReceiptTransactionVariationsItems[]
     */
    public function getVariations()
    {
        return $this->container['variations'];
    }

    /**
     * Sets variations
     *
     * @param \Swagger\Client\Model\AllOfShopReceiptTransactionVariationsItems[] $variations Array of variations and personalizations the buyer chose.
     *
     * @return $this
     */
    public function setVariations($variations)
    {
        $this->container['variations'] = $variations;

        return $this;
    }

    /**
     * Gets product_data
     *
     * @return \Swagger\Client\Model\AllOfShopReceiptTransactionProductDataItems[]
     */
    public function getProductData()
    {
        return $this->container['product_data'];
    }

    /**
     * Sets product_data
     *
     * @param \Swagger\Client\Model\AllOfShopReceiptTransactionProductDataItems[] $product_data A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
     *
     * @return $this
     */
    public function setProductData($product_data)
    {
        $this->container['product_data'] = $product_data;

        return $this;
    }

    /**
     * Gets shipping_profile_id
     *
     * @return int
     */
    public function getShippingProfileId()
    {
        return $this->container['shipping_profile_id'];
    }

    /**
     * Sets shipping_profile_id
     *
     * @param int $shipping_profile_id The ID of the shipping profile selected for this listing.
     *
     * @return $this
     */
    public function setShippingProfileId($shipping_profile_id)
    {
        $this->container['shipping_profile_id'] = $shipping_profile_id;

        return $this;
    }

    /**
     * Gets min_processing_days
     *
     * @return int
     */
    public function getMinProcessingDays()
    {
        return $this->container['min_processing_days'];
    }

    /**
     * Sets min_processing_days
     *
     * @param int $min_processing_days The minimum number of days for processing the listing.
     *
     * @return $this
     */
    public function setMinProcessingDays($min_processing_days)
    {
        $this->container['min_processing_days'] = $min_processing_days;

        return $this;
    }

    /**
     * Gets max_processing_days
     *
     * @return int
     */
    public function getMaxProcessingDays()
    {
        return $this->container['max_processing_days'];
    }

    /**
     * Sets max_processing_days
     *
     * @param int $max_processing_days The maximum number of days for processing the listing.
     *
     * @return $this
     */
    public function setMaxProcessingDays($max_processing_days)
    {
        $this->container['max_processing_days'] = $max_processing_days;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method Name of the selected shipping method.
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method)
    {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets shipping_upgrade
     *
     * @return string
     */
    public function getShippingUpgrade()
    {
        return $this->container['shipping_upgrade'];
    }

    /**
     * Sets shipping_upgrade
     *
     * @param string $shipping_upgrade The name of the shipping upgrade selected for this listing. Default value is null.
     *
     * @return $this
     */
    public function setShippingUpgrade($shipping_upgrade)
    {
        $this->container['shipping_upgrade'] = $shipping_upgrade;

        return $this;
    }

    /**
     * Gets expected_ship_date
     *
     * @return int
     */
    public function getExpectedShipDate()
    {
        return $this->container['expected_ship_date'];
    }

    /**
     * Sets expected_ship_date
     *
     * @param int $expected_ship_date The date & time of the expected ship date, in epoch seconds.
     *
     * @return $this
     */
    public function setExpectedShipDate($expected_ship_date)
    {
        $this->container['expected_ship_date'] = $expected_ship_date;

        return $this;
    }

    /**
     * Gets buyer_coupon
     *
     * @return float
     */
    public function getBuyerCoupon()
    {
        return $this->container['buyer_coupon'];
    }

    /**
     * Sets buyer_coupon
     *
     * @param float $buyer_coupon The amount of the buyer coupon that was discounted in the shop's currency.
     *
     * @return $this
     */
    public function setBuyerCoupon($buyer_coupon)
    {
        $this->container['buyer_coupon'] = $buyer_coupon;

        return $this;
    }

    /**
     * Gets shop_coupon
     *
     * @return float
     */
    public function getShopCoupon()
    {
        return $this->container['shop_coupon'];
    }

    /**
     * Sets shop_coupon
     *
     * @param float $shop_coupon The amount of the shop coupon that was discounted in the shop's currency.
     *
     * @return $this
     */
    public function setShopCoupon($shop_coupon)
    {
        $this->container['shop_coupon'] = $shop_coupon;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
