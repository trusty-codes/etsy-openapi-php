<?php
/**
 * PaymentAdjustment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaymentAdjustment Class Doc Comment
 *
 * @category Class
 * @description Represents a refund, which applies to a prior Etsy payment. All monetary amounts are in USD pennies unless otherwise specified.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentAdjustment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentAdjustment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_adjustment_id' => 'int',
'payment_id' => 'int',
'status' => 'string',
'is_success' => 'bool',
'user_id' => 'int',
'reason_code' => 'string',
'total_adjustment_amount' => 'int',
'shop_total_adjustment_amount' => 'int',
'buyer_total_adjustment_amount' => 'int',
'total_fee_adjustment_amount' => 'int',
'create_timestamp' => 'int',
'created_timestamp' => 'int',
'update_timestamp' => 'int',
'updated_timestamp' => 'int',
'payment_adjustment_items' => '\Swagger\Client\Model\AllOfPaymentAdjustmentPaymentAdjustmentItemsItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_adjustment_id' => null,
'payment_id' => null,
'status' => null,
'is_success' => null,
'user_id' => null,
'reason_code' => null,
'total_adjustment_amount' => null,
'shop_total_adjustment_amount' => null,
'buyer_total_adjustment_amount' => null,
'total_fee_adjustment_amount' => null,
'create_timestamp' => null,
'created_timestamp' => null,
'update_timestamp' => null,
'updated_timestamp' => null,
'payment_adjustment_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_adjustment_id' => 'payment_adjustment_id',
'payment_id' => 'payment_id',
'status' => 'status',
'is_success' => 'is_success',
'user_id' => 'user_id',
'reason_code' => 'reason_code',
'total_adjustment_amount' => 'total_adjustment_amount',
'shop_total_adjustment_amount' => 'shop_total_adjustment_amount',
'buyer_total_adjustment_amount' => 'buyer_total_adjustment_amount',
'total_fee_adjustment_amount' => 'total_fee_adjustment_amount',
'create_timestamp' => 'create_timestamp',
'created_timestamp' => 'created_timestamp',
'update_timestamp' => 'update_timestamp',
'updated_timestamp' => 'updated_timestamp',
'payment_adjustment_items' => 'payment_adjustment_items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_adjustment_id' => 'setPaymentAdjustmentId',
'payment_id' => 'setPaymentId',
'status' => 'setStatus',
'is_success' => 'setIsSuccess',
'user_id' => 'setUserId',
'reason_code' => 'setReasonCode',
'total_adjustment_amount' => 'setTotalAdjustmentAmount',
'shop_total_adjustment_amount' => 'setShopTotalAdjustmentAmount',
'buyer_total_adjustment_amount' => 'setBuyerTotalAdjustmentAmount',
'total_fee_adjustment_amount' => 'setTotalFeeAdjustmentAmount',
'create_timestamp' => 'setCreateTimestamp',
'created_timestamp' => 'setCreatedTimestamp',
'update_timestamp' => 'setUpdateTimestamp',
'updated_timestamp' => 'setUpdatedTimestamp',
'payment_adjustment_items' => 'setPaymentAdjustmentItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_adjustment_id' => 'getPaymentAdjustmentId',
'payment_id' => 'getPaymentId',
'status' => 'getStatus',
'is_success' => 'getIsSuccess',
'user_id' => 'getUserId',
'reason_code' => 'getReasonCode',
'total_adjustment_amount' => 'getTotalAdjustmentAmount',
'shop_total_adjustment_amount' => 'getShopTotalAdjustmentAmount',
'buyer_total_adjustment_amount' => 'getBuyerTotalAdjustmentAmount',
'total_fee_adjustment_amount' => 'getTotalFeeAdjustmentAmount',
'create_timestamp' => 'getCreateTimestamp',
'created_timestamp' => 'getCreatedTimestamp',
'update_timestamp' => 'getUpdateTimestamp',
'updated_timestamp' => 'getUpdatedTimestamp',
'payment_adjustment_items' => 'getPaymentAdjustmentItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_adjustment_id'] = isset($data['payment_adjustment_id']) ? $data['payment_adjustment_id'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['is_success'] = isset($data['is_success']) ? $data['is_success'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['total_adjustment_amount'] = isset($data['total_adjustment_amount']) ? $data['total_adjustment_amount'] : null;
        $this->container['shop_total_adjustment_amount'] = isset($data['shop_total_adjustment_amount']) ? $data['shop_total_adjustment_amount'] : null;
        $this->container['buyer_total_adjustment_amount'] = isset($data['buyer_total_adjustment_amount']) ? $data['buyer_total_adjustment_amount'] : null;
        $this->container['total_fee_adjustment_amount'] = isset($data['total_fee_adjustment_amount']) ? $data['total_fee_adjustment_amount'] : null;
        $this->container['create_timestamp'] = isset($data['create_timestamp']) ? $data['create_timestamp'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['update_timestamp'] = isset($data['update_timestamp']) ? $data['update_timestamp'] : null;
        $this->container['updated_timestamp'] = isset($data['updated_timestamp']) ? $data['updated_timestamp'] : null;
        $this->container['payment_adjustment_items'] = isset($data['payment_adjustment_items']) ? $data['payment_adjustment_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payment_adjustment_id
     *
     * @return int
     */
    public function getPaymentAdjustmentId()
    {
        return $this->container['payment_adjustment_id'];
    }

    /**
     * Sets payment_adjustment_id
     *
     * @param int $payment_adjustment_id The numeric ID for a payment adjustment.
     *
     * @return $this
     */
    public function setPaymentAdjustmentId($payment_adjustment_id)
    {
        $this->container['payment_adjustment_id'] = $payment_adjustment_id;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status string of the payment adjustment.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_success
     *
     * @return bool
     */
    public function getIsSuccess()
    {
        return $this->container['is_success'];
    }

    /**
     * Sets is_success
     *
     * @param bool $is_success When true, the payment adjustment was or is likely to complete successfully.
     *
     * @return $this
     */
    public function setIsSuccess($is_success)
    {
        $this->container['is_success'] = $is_success;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code A human-readable string describing the reason for the refund.
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets total_adjustment_amount
     *
     * @return int
     */
    public function getTotalAdjustmentAmount()
    {
        return $this->container['total_adjustment_amount'];
    }

    /**
     * Sets total_adjustment_amount
     *
     * @param int $total_adjustment_amount The total numeric amount of the refund in the payment currency.
     *
     * @return $this
     */
    public function setTotalAdjustmentAmount($total_adjustment_amount)
    {
        $this->container['total_adjustment_amount'] = $total_adjustment_amount;

        return $this;
    }

    /**
     * Gets shop_total_adjustment_amount
     *
     * @return int
     */
    public function getShopTotalAdjustmentAmount()
    {
        return $this->container['shop_total_adjustment_amount'];
    }

    /**
     * Sets shop_total_adjustment_amount
     *
     * @param int $shop_total_adjustment_amount The numeric amount of the refund in the shop currency.
     *
     * @return $this
     */
    public function setShopTotalAdjustmentAmount($shop_total_adjustment_amount)
    {
        $this->container['shop_total_adjustment_amount'] = $shop_total_adjustment_amount;

        return $this;
    }

    /**
     * Gets buyer_total_adjustment_amount
     *
     * @return int
     */
    public function getBuyerTotalAdjustmentAmount()
    {
        return $this->container['buyer_total_adjustment_amount'];
    }

    /**
     * Sets buyer_total_adjustment_amount
     *
     * @param int $buyer_total_adjustment_amount The numeric amount of the refund in the buyer currency.
     *
     * @return $this
     */
    public function setBuyerTotalAdjustmentAmount($buyer_total_adjustment_amount)
    {
        $this->container['buyer_total_adjustment_amount'] = $buyer_total_adjustment_amount;

        return $this;
    }

    /**
     * Gets total_fee_adjustment_amount
     *
     * @return int
     */
    public function getTotalFeeAdjustmentAmount()
    {
        return $this->container['total_fee_adjustment_amount'];
    }

    /**
     * Sets total_fee_adjustment_amount
     *
     * @param int $total_fee_adjustment_amount The numeric amount of card processing fees associated with a payment adjustment.
     *
     * @return $this
     */
    public function setTotalFeeAdjustmentAmount($total_fee_adjustment_amount)
    {
        $this->container['total_fee_adjustment_amount'] = $total_fee_adjustment_amount;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreateTimestamp($create_timestamp)
    {
        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The transaction\\'s creation date and time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return $this
     */
    public function setUpdateTimestamp($update_timestamp)
    {
        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets updated_timestamp
     *
     * @return int
     */
    public function getUpdatedTimestamp()
    {
        return $this->container['updated_timestamp'];
    }

    /**
     * Sets updated_timestamp
     *
     * @param int $updated_timestamp The date and time of the last change to the payment adjustment in epoch seconds.
     *
     * @return $this
     */
    public function setUpdatedTimestamp($updated_timestamp)
    {
        $this->container['updated_timestamp'] = $updated_timestamp;

        return $this;
    }

    /**
     * Gets payment_adjustment_items
     *
     * @return \Swagger\Client\Model\AllOfPaymentAdjustmentPaymentAdjustmentItemsItems[]
     */
    public function getPaymentAdjustmentItems()
    {
        return $this->container['payment_adjustment_items'];
    }

    /**
     * Sets payment_adjustment_items
     *
     * @param \Swagger\Client\Model\AllOfPaymentAdjustmentPaymentAdjustmentItemsItems[] $payment_adjustment_items List of payment adjustment line items.
     *
     * @return $this
     */
    public function setPaymentAdjustmentItems($payment_adjustment_items)
    {
        $this->container['payment_adjustment_items'] = $payment_adjustment_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
