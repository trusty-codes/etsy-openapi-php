<?php
/**
 * ShopReceipt
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShopReceipt Class Doc Comment
 *
 * @category Class
 * @description The record of a purchase from a shop. Shop receipts display monetary values using the shop&#x27;s currency.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopReceipt implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShopReceipt';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receipt_id' => 'int',
'receipt_type' => 'int',
'seller_user_id' => 'int',
'seller_email' => 'string',
'buyer_user_id' => 'int',
'buyer_email' => 'string',
'name' => 'string',
'first_line' => 'string',
'second_line' => 'string',
'city' => 'string',
'state' => 'string',
'zip' => 'string',
'status' => 'string',
'formatted_address' => 'string',
'country_iso' => 'string',
'payment_method' => 'string',
'payment_email' => 'string',
'message_from_seller' => 'string',
'message_from_buyer' => 'string',
'message_from_payment' => 'string',
'is_paid' => 'bool',
'is_shipped' => 'bool',
'create_timestamp' => 'int',
'created_timestamp' => 'int',
'update_timestamp' => 'int',
'updated_timestamp' => 'int',
'is_gift' => 'bool',
'gift_message' => 'string',
'grandtotal' => 'AllOfShopReceiptGrandtotal',
'subtotal' => 'AllOfShopReceiptSubtotal',
'total_price' => 'AllOfShopReceiptTotalPrice',
'total_shipping_cost' => 'AllOfShopReceiptTotalShippingCost',
'total_tax_cost' => 'AllOfShopReceiptTotalTaxCost',
'total_vat_cost' => 'AllOfShopReceiptTotalVatCost',
'discount_amt' => 'AllOfShopReceiptDiscountAmt',
'gift_wrap_price' => 'AllOfShopReceiptGiftWrapPrice',
'shipments' => '\Swagger\Client\Model\AllOfShopReceiptShipmentsItems[]',
'transactions' => '\Swagger\Client\Model\AllOfShopReceiptTransactionsItems[]',
'refunds' => '\Swagger\Client\Model\AllOfShopReceiptRefundsItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receipt_id' => null,
'receipt_type' => null,
'seller_user_id' => null,
'seller_email' => 'email',
'buyer_user_id' => null,
'buyer_email' => null,
'name' => null,
'first_line' => null,
'second_line' => null,
'city' => null,
'state' => null,
'zip' => null,
'status' => null,
'formatted_address' => null,
'country_iso' => null,
'payment_method' => null,
'payment_email' => null,
'message_from_seller' => null,
'message_from_buyer' => null,
'message_from_payment' => null,
'is_paid' => null,
'is_shipped' => null,
'create_timestamp' => null,
'created_timestamp' => null,
'update_timestamp' => null,
'updated_timestamp' => null,
'is_gift' => null,
'gift_message' => null,
'grandtotal' => null,
'subtotal' => null,
'total_price' => null,
'total_shipping_cost' => null,
'total_tax_cost' => null,
'total_vat_cost' => null,
'discount_amt' => null,
'gift_wrap_price' => null,
'shipments' => null,
'transactions' => null,
'refunds' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receipt_id' => 'receipt_id',
'receipt_type' => 'receipt_type',
'seller_user_id' => 'seller_user_id',
'seller_email' => 'seller_email',
'buyer_user_id' => 'buyer_user_id',
'buyer_email' => 'buyer_email',
'name' => 'name',
'first_line' => 'first_line',
'second_line' => 'second_line',
'city' => 'city',
'state' => 'state',
'zip' => 'zip',
'status' => 'status',
'formatted_address' => 'formatted_address',
'country_iso' => 'country_iso',
'payment_method' => 'payment_method',
'payment_email' => 'payment_email',
'message_from_seller' => 'message_from_seller',
'message_from_buyer' => 'message_from_buyer',
'message_from_payment' => 'message_from_payment',
'is_paid' => 'is_paid',
'is_shipped' => 'is_shipped',
'create_timestamp' => 'create_timestamp',
'created_timestamp' => 'created_timestamp',
'update_timestamp' => 'update_timestamp',
'updated_timestamp' => 'updated_timestamp',
'is_gift' => 'is_gift',
'gift_message' => 'gift_message',
'grandtotal' => 'grandtotal',
'subtotal' => 'subtotal',
'total_price' => 'total_price',
'total_shipping_cost' => 'total_shipping_cost',
'total_tax_cost' => 'total_tax_cost',
'total_vat_cost' => 'total_vat_cost',
'discount_amt' => 'discount_amt',
'gift_wrap_price' => 'gift_wrap_price',
'shipments' => 'shipments',
'transactions' => 'transactions',
'refunds' => 'refunds'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receipt_id' => 'setReceiptId',
'receipt_type' => 'setReceiptType',
'seller_user_id' => 'setSellerUserId',
'seller_email' => 'setSellerEmail',
'buyer_user_id' => 'setBuyerUserId',
'buyer_email' => 'setBuyerEmail',
'name' => 'setName',
'first_line' => 'setFirstLine',
'second_line' => 'setSecondLine',
'city' => 'setCity',
'state' => 'setState',
'zip' => 'setZip',
'status' => 'setStatus',
'formatted_address' => 'setFormattedAddress',
'country_iso' => 'setCountryIso',
'payment_method' => 'setPaymentMethod',
'payment_email' => 'setPaymentEmail',
'message_from_seller' => 'setMessageFromSeller',
'message_from_buyer' => 'setMessageFromBuyer',
'message_from_payment' => 'setMessageFromPayment',
'is_paid' => 'setIsPaid',
'is_shipped' => 'setIsShipped',
'create_timestamp' => 'setCreateTimestamp',
'created_timestamp' => 'setCreatedTimestamp',
'update_timestamp' => 'setUpdateTimestamp',
'updated_timestamp' => 'setUpdatedTimestamp',
'is_gift' => 'setIsGift',
'gift_message' => 'setGiftMessage',
'grandtotal' => 'setGrandtotal',
'subtotal' => 'setSubtotal',
'total_price' => 'setTotalPrice',
'total_shipping_cost' => 'setTotalShippingCost',
'total_tax_cost' => 'setTotalTaxCost',
'total_vat_cost' => 'setTotalVatCost',
'discount_amt' => 'setDiscountAmt',
'gift_wrap_price' => 'setGiftWrapPrice',
'shipments' => 'setShipments',
'transactions' => 'setTransactions',
'refunds' => 'setRefunds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receipt_id' => 'getReceiptId',
'receipt_type' => 'getReceiptType',
'seller_user_id' => 'getSellerUserId',
'seller_email' => 'getSellerEmail',
'buyer_user_id' => 'getBuyerUserId',
'buyer_email' => 'getBuyerEmail',
'name' => 'getName',
'first_line' => 'getFirstLine',
'second_line' => 'getSecondLine',
'city' => 'getCity',
'state' => 'getState',
'zip' => 'getZip',
'status' => 'getStatus',
'formatted_address' => 'getFormattedAddress',
'country_iso' => 'getCountryIso',
'payment_method' => 'getPaymentMethod',
'payment_email' => 'getPaymentEmail',
'message_from_seller' => 'getMessageFromSeller',
'message_from_buyer' => 'getMessageFromBuyer',
'message_from_payment' => 'getMessageFromPayment',
'is_paid' => 'getIsPaid',
'is_shipped' => 'getIsShipped',
'create_timestamp' => 'getCreateTimestamp',
'created_timestamp' => 'getCreatedTimestamp',
'update_timestamp' => 'getUpdateTimestamp',
'updated_timestamp' => 'getUpdatedTimestamp',
'is_gift' => 'getIsGift',
'gift_message' => 'getGiftMessage',
'grandtotal' => 'getGrandtotal',
'subtotal' => 'getSubtotal',
'total_price' => 'getTotalPrice',
'total_shipping_cost' => 'getTotalShippingCost',
'total_tax_cost' => 'getTotalTaxCost',
'total_vat_cost' => 'getTotalVatCost',
'discount_amt' => 'getDiscountAmt',
'gift_wrap_price' => 'getGiftWrapPrice',
'shipments' => 'getShipments',
'transactions' => 'getTransactions',
'refunds' => 'getRefunds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PAID = 'paid';
const STATUS_COMPLETED = 'completed';
const STATUS_OPEN = 'open';
const STATUS_PAYMENT_PROCESSING = 'payment processing';
const STATUS_CANCELED = 'canceled';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PAID,
self::STATUS_COMPLETED,
self::STATUS_OPEN,
self::STATUS_PAYMENT_PROCESSING,
self::STATUS_CANCELED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receipt_id'] = isset($data['receipt_id']) ? $data['receipt_id'] : null;
        $this->container['receipt_type'] = isset($data['receipt_type']) ? $data['receipt_type'] : null;
        $this->container['seller_user_id'] = isset($data['seller_user_id']) ? $data['seller_user_id'] : null;
        $this->container['seller_email'] = isset($data['seller_email']) ? $data['seller_email'] : null;
        $this->container['buyer_user_id'] = isset($data['buyer_user_id']) ? $data['buyer_user_id'] : null;
        $this->container['buyer_email'] = isset($data['buyer_email']) ? $data['buyer_email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['first_line'] = isset($data['first_line']) ? $data['first_line'] : null;
        $this->container['second_line'] = isset($data['second_line']) ? $data['second_line'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['formatted_address'] = isset($data['formatted_address']) ? $data['formatted_address'] : null;
        $this->container['country_iso'] = isset($data['country_iso']) ? $data['country_iso'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['payment_email'] = isset($data['payment_email']) ? $data['payment_email'] : null;
        $this->container['message_from_seller'] = isset($data['message_from_seller']) ? $data['message_from_seller'] : null;
        $this->container['message_from_buyer'] = isset($data['message_from_buyer']) ? $data['message_from_buyer'] : null;
        $this->container['message_from_payment'] = isset($data['message_from_payment']) ? $data['message_from_payment'] : null;
        $this->container['is_paid'] = isset($data['is_paid']) ? $data['is_paid'] : null;
        $this->container['is_shipped'] = isset($data['is_shipped']) ? $data['is_shipped'] : null;
        $this->container['create_timestamp'] = isset($data['create_timestamp']) ? $data['create_timestamp'] : null;
        $this->container['created_timestamp'] = isset($data['created_timestamp']) ? $data['created_timestamp'] : null;
        $this->container['update_timestamp'] = isset($data['update_timestamp']) ? $data['update_timestamp'] : null;
        $this->container['updated_timestamp'] = isset($data['updated_timestamp']) ? $data['updated_timestamp'] : null;
        $this->container['is_gift'] = isset($data['is_gift']) ? $data['is_gift'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
        $this->container['grandtotal'] = isset($data['grandtotal']) ? $data['grandtotal'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['total_shipping_cost'] = isset($data['total_shipping_cost']) ? $data['total_shipping_cost'] : null;
        $this->container['total_tax_cost'] = isset($data['total_tax_cost']) ? $data['total_tax_cost'] : null;
        $this->container['total_vat_cost'] = isset($data['total_vat_cost']) ? $data['total_vat_cost'] : null;
        $this->container['discount_amt'] = isset($data['discount_amt']) ? $data['discount_amt'] : null;
        $this->container['gift_wrap_price'] = isset($data['gift_wrap_price']) ? $data['gift_wrap_price'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['refunds'] = isset($data['refunds']) ? $data['refunds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receipt_id
     *
     * @return int
     */
    public function getReceiptId()
    {
        return $this->container['receipt_id'];
    }

    /**
     * Sets receipt_id
     *
     * @param int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
     *
     * @return $this
     */
    public function setReceiptId($receipt_id)
    {
        $this->container['receipt_id'] = $receipt_id;

        return $this;
    }

    /**
     * Gets receipt_type
     *
     * @return int
     */
    public function getReceiptType()
    {
        return $this->container['receipt_type'];
    }

    /**
     * Sets receipt_type
     *
     * @param int $receipt_type The numeric value for the Etsy channel that serviced the purchase: 0 for Etsy.com, 1 for a Pattern shop.
     *
     * @return $this
     */
    public function setReceiptType($receipt_type)
    {
        $this->container['receipt_type'] = $receipt_type;

        return $this;
    }

    /**
     * Gets seller_user_id
     *
     * @return int
     */
    public function getSellerUserId()
    {
        return $this->container['seller_user_id'];
    }

    /**
     * Sets seller_user_id
     *
     * @param int $seller_user_id The numeric ID for the [user](/documentation/reference#tag/User) (seller) fulfilling the purchase.
     *
     * @return $this
     */
    public function setSellerUserId($seller_user_id)
    {
        $this->container['seller_user_id'] = $seller_user_id;

        return $this;
    }

    /**
     * Gets seller_email
     *
     * @return string
     */
    public function getSellerEmail()
    {
        return $this->container['seller_email'];
    }

    /**
     * Sets seller_email
     *
     * @param string $seller_email The email address string for the seller of the listing.
     *
     * @return $this
     */
    public function setSellerEmail($seller_email)
    {
        $this->container['seller_email'] = $seller_email;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return int
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param int $buyer_user_id The numeric ID for the [user](/documentation/reference#tag/User) making the purchase.
     *
     * @return $this
     */
    public function setBuyerUserId($buyer_user_id)
    {
        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets buyer_email
     *
     * @return string
     */
    public function getBuyerEmail()
    {
        return $this->container['buyer_email'];
    }

    /**
     * Sets buyer_email
     *
     * @param string $buyer_email The email address string for the buyer of the listing.
     *
     * @return $this
     */
    public function setBuyerEmail($buyer_email)
    {
        $this->container['buyer_email'] = $buyer_email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_line
     *
     * @return string
     */
    public function getFirstLine()
    {
        return $this->container['first_line'];
    }

    /**
     * Sets first_line
     *
     * @param string $first_line The first address line string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setFirstLine($first_line)
    {
        $this->container['first_line'] = $first_line;

        return $this;
    }

    /**
     * Gets second_line
     *
     * @return string
     */
    public function getSecondLine()
    {
        return $this->container['second_line'];
    }

    /**
     * Sets second_line
     *
     * @param string $second_line The optional second address line string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setSecondLine($second_line)
    {
        $this->container['second_line'] = $second_line;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip The zip code string (not necessarily a number) for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets formatted_address
     *
     * @return string
     */
    public function getFormattedAddress()
    {
        return $this->container['formatted_address'];
    }

    /**
     * Sets formatted_address
     *
     * @param string $formatted_address The formatted shipping address string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setFormattedAddress($formatted_address)
    {
        $this->container['formatted_address'] = $formatted_address;

        return $this;
    }

    /**
     * Gets country_iso
     *
     * @return string
     */
    public function getCountryIso()
    {
        return $this->container['country_iso'];
    }

    /**
     * Sets country_iso
     *
     * @param string $country_iso The ISO-3166 alpha-2 country code string for the recipient in the shipping address.
     *
     * @return $this
     */
    public function setCountryIso($country_iso)
    {
        $this->container['country_iso'] = $country_iso;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param string $payment_method The payment method string identifying purchaser's payment method, which must be one of: \\'cc\\' (credit card), \\'paypal\\', \\'check\\', \\'mo\\' (money order), \\'bt\\' (bank transfer), \\'other\\', \\'ideal\\', \\'sofort\\', \\'apple_pay\\', \\'google\\', \\'android_pay\\', \\'google_pay\\', \\'klarna\\', \\'k_pay_in_4\\' (klarna), \\'k_pay_in_3\\' (klarna), or \\'k_financing\\' (klarna).
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_email
     *
     * @return string
     */
    public function getPaymentEmail()
    {
        return $this->container['payment_email'];
    }

    /**
     * Sets payment_email
     *
     * @param string $payment_email The email address string for the email address to which to send payment confirmation
     *
     * @return $this
     */
    public function setPaymentEmail($payment_email)
    {
        $this->container['payment_email'] = $payment_email;

        return $this;
    }

    /**
     * Gets message_from_seller
     *
     * @return string
     */
    public function getMessageFromSeller()
    {
        return $this->container['message_from_seller'];
    }

    /**
     * Sets message_from_seller
     *
     * @param string $message_from_seller An optional message string from the seller.
     *
     * @return $this
     */
    public function setMessageFromSeller($message_from_seller)
    {
        $this->container['message_from_seller'] = $message_from_seller;

        return $this;
    }

    /**
     * Gets message_from_buyer
     *
     * @return string
     */
    public function getMessageFromBuyer()
    {
        return $this->container['message_from_buyer'];
    }

    /**
     * Sets message_from_buyer
     *
     * @param string $message_from_buyer An optional message string from the buyer.
     *
     * @return $this
     */
    public function setMessageFromBuyer($message_from_buyer)
    {
        $this->container['message_from_buyer'] = $message_from_buyer;

        return $this;
    }

    /**
     * Gets message_from_payment
     *
     * @return string
     */
    public function getMessageFromPayment()
    {
        return $this->container['message_from_payment'];
    }

    /**
     * Sets message_from_payment
     *
     * @param string $message_from_payment The machine-generated acknowledgement string from the payment system.
     *
     * @return $this
     */
    public function setMessageFromPayment($message_from_payment)
    {
        $this->container['message_from_payment'] = $message_from_payment;

        return $this;
    }

    /**
     * Gets is_paid
     *
     * @return bool
     */
    public function getIsPaid()
    {
        return $this->container['is_paid'];
    }

    /**
     * Sets is_paid
     *
     * @param bool $is_paid When true, buyer paid for this purchase.
     *
     * @return $this
     */
    public function setIsPaid($is_paid)
    {
        $this->container['is_paid'] = $is_paid;

        return $this;
    }

    /**
     * Gets is_shipped
     *
     * @return bool
     */
    public function getIsShipped()
    {
        return $this->container['is_shipped'];
    }

    /**
     * Sets is_shipped
     *
     * @param bool $is_shipped When true, seller shipped the products.
     *
     * @return $this
     */
    public function setIsShipped($is_shipped)
    {
        $this->container['is_shipped'] = $is_shipped;

        return $this;
    }

    /**
     * Gets create_timestamp
     *
     * @return int
     */
    public function getCreateTimestamp()
    {
        return $this->container['create_timestamp'];
    }

    /**
     * Sets create_timestamp
     *
     * @param int $create_timestamp The receipt\\'s creation time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreateTimestamp($create_timestamp)
    {
        $this->container['create_timestamp'] = $create_timestamp;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return int
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param int $created_timestamp The receipt\\'s creation time, in epoch seconds.
     *
     * @return $this
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets update_timestamp
     *
     * @return int
     */
    public function getUpdateTimestamp()
    {
        return $this->container['update_timestamp'];
    }

    /**
     * Sets update_timestamp
     *
     * @param int $update_timestamp The time of the last update to the receipt, in epoch seconds.
     *
     * @return $this
     */
    public function setUpdateTimestamp($update_timestamp)
    {
        $this->container['update_timestamp'] = $update_timestamp;

        return $this;
    }

    /**
     * Gets updated_timestamp
     *
     * @return int
     */
    public function getUpdatedTimestamp()
    {
        return $this->container['updated_timestamp'];
    }

    /**
     * Sets updated_timestamp
     *
     * @param int $updated_timestamp The time of the last update to the receipt, in epoch seconds.
     *
     * @return $this
     */
    public function setUpdatedTimestamp($updated_timestamp)
    {
        $this->container['updated_timestamp'] = $updated_timestamp;

        return $this;
    }

    /**
     * Gets is_gift
     *
     * @return bool
     */
    public function getIsGift()
    {
        return $this->container['is_gift'];
    }

    /**
     * Sets is_gift
     *
     * @param bool $is_gift When true, the buyer indicated this purchase is a gift.
     *
     * @return $this
     */
    public function setIsGift($is_gift)
    {
        $this->container['is_gift'] = $is_gift;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message A gift message string the buyer requests delivered with the product.
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets grandtotal
     *
     * @return AllOfShopReceiptGrandtotal
     */
    public function getGrandtotal()
    {
        return $this->container['grandtotal'];
    }

    /**
     * Sets grandtotal
     *
     * @param AllOfShopReceiptGrandtotal $grandtotal A number equal to the total_price minus the coupon discount plus tax and shipping costs.
     *
     * @return $this
     */
    public function setGrandtotal($grandtotal)
    {
        $this->container['grandtotal'] = $grandtotal;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return AllOfShopReceiptSubtotal
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param AllOfShopReceiptSubtotal $subtotal A number equal to the total_price minus coupon discounts. Does not included tax or shipping costs.
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return AllOfShopReceiptTotalPrice
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param AllOfShopReceiptTotalPrice $total_price A number equal to the sum of the individual listings\\' (price * quantity). Does not included tax or shipping costs.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets total_shipping_cost
     *
     * @return AllOfShopReceiptTotalShippingCost
     */
    public function getTotalShippingCost()
    {
        return $this->container['total_shipping_cost'];
    }

    /**
     * Sets total_shipping_cost
     *
     * @param AllOfShopReceiptTotalShippingCost $total_shipping_cost A number equal to the total shipping cost of the receipt.
     *
     * @return $this
     */
    public function setTotalShippingCost($total_shipping_cost)
    {
        $this->container['total_shipping_cost'] = $total_shipping_cost;

        return $this;
    }

    /**
     * Gets total_tax_cost
     *
     * @return AllOfShopReceiptTotalTaxCost
     */
    public function getTotalTaxCost()
    {
        return $this->container['total_tax_cost'];
    }

    /**
     * Sets total_tax_cost
     *
     * @param AllOfShopReceiptTotalTaxCost $total_tax_cost The total sales tax of the receipt.
     *
     * @return $this
     */
    public function setTotalTaxCost($total_tax_cost)
    {
        $this->container['total_tax_cost'] = $total_tax_cost;

        return $this;
    }

    /**
     * Gets total_vat_cost
     *
     * @return AllOfShopReceiptTotalVatCost
     */
    public function getTotalVatCost()
    {
        return $this->container['total_vat_cost'];
    }

    /**
     * Sets total_vat_cost
     *
     * @param AllOfShopReceiptTotalVatCost $total_vat_cost A number equal to the total value-added tax (VAT) of the receipt.
     *
     * @return $this
     */
    public function setTotalVatCost($total_vat_cost)
    {
        $this->container['total_vat_cost'] = $total_vat_cost;

        return $this;
    }

    /**
     * Gets discount_amt
     *
     * @return AllOfShopReceiptDiscountAmt
     */
    public function getDiscountAmt()
    {
        return $this->container['discount_amt'];
    }

    /**
     * Sets discount_amt
     *
     * @param AllOfShopReceiptDiscountAmt $discount_amt The numeric total discounted price for the receipt when using a discount (percent or fixed) coupon. Free shipping coupons are not included in this discount amount.
     *
     * @return $this
     */
    public function setDiscountAmt($discount_amt)
    {
        $this->container['discount_amt'] = $discount_amt;

        return $this;
    }

    /**
     * Gets gift_wrap_price
     *
     * @return AllOfShopReceiptGiftWrapPrice
     */
    public function getGiftWrapPrice()
    {
        return $this->container['gift_wrap_price'];
    }

    /**
     * Sets gift_wrap_price
     *
     * @param AllOfShopReceiptGiftWrapPrice $gift_wrap_price The numeric price of gift wrap for this receipt.
     *
     * @return $this
     */
    public function setGiftWrapPrice($gift_wrap_price)
    {
        $this->container['gift_wrap_price'] = $gift_wrap_price;

        return $this;
    }

    /**
     * Gets shipments
     *
     * @return \Swagger\Client\Model\AllOfShopReceiptShipmentsItems[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     *
     * @param \Swagger\Client\Model\AllOfShopReceiptShipmentsItems[] $shipments A list of shipment statements for this receipt.
     *
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Swagger\Client\Model\AllOfShopReceiptTransactionsItems[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Swagger\Client\Model\AllOfShopReceiptTransactionsItems[] $transactions Array of transactions for the receipt.
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Swagger\Client\Model\AllOfShopReceiptRefundsItems[]
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Swagger\Client\Model\AllOfShopReceiptRefundsItems[] $refunds Refunds for a given receipt.
     *
     * @return $this
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
