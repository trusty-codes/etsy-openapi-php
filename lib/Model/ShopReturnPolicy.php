<?php
/**
 * ShopReturnPolicy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ShopReturnPolicy Class Doc Comment
 *
 * @category Class
 * @description Represents a listing-level return policy.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopReturnPolicy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShopReturnPolicy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'return_policy_id' => 'int',
'shop_id' => 'int',
'accepts_returns' => 'bool',
'accepts_exchanges' => 'bool',
'return_deadline' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'return_policy_id' => null,
'shop_id' => null,
'accepts_returns' => null,
'accepts_exchanges' => null,
'return_deadline' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'return_policy_id' => 'return_policy_id',
'shop_id' => 'shop_id',
'accepts_returns' => 'accepts_returns',
'accepts_exchanges' => 'accepts_exchanges',
'return_deadline' => 'return_deadline'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'return_policy_id' => 'setReturnPolicyId',
'shop_id' => 'setShopId',
'accepts_returns' => 'setAcceptsReturns',
'accepts_exchanges' => 'setAcceptsExchanges',
'return_deadline' => 'setReturnDeadline'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'return_policy_id' => 'getReturnPolicyId',
'shop_id' => 'getShopId',
'accepts_returns' => 'getAcceptsReturns',
'accepts_exchanges' => 'getAcceptsExchanges',
'return_deadline' => 'getReturnDeadline'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['return_policy_id'] = isset($data['return_policy_id']) ? $data['return_policy_id'] : null;
        $this->container['shop_id'] = isset($data['shop_id']) ? $data['shop_id'] : null;
        $this->container['accepts_returns'] = isset($data['accepts_returns']) ? $data['accepts_returns'] : null;
        $this->container['accepts_exchanges'] = isset($data['accepts_exchanges']) ? $data['accepts_exchanges'] : null;
        $this->container['return_deadline'] = isset($data['return_deadline']) ? $data['return_deadline'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets return_policy_id
     *
     * @return int
     */
    public function getReturnPolicyId()
    {
        return $this->container['return_policy_id'];
    }

    /**
     * Sets return_policy_id
     *
     * @param int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies).
     *
     * @return $this
     */
    public function setReturnPolicyId($return_policy_id)
    {
        $this->container['return_policy_id'] = $return_policy_id;

        return $this;
    }

    /**
     * Gets shop_id
     *
     * @return int
     */
    public function getShopId()
    {
        return $this->container['shop_id'];
    }

    /**
     * Sets shop_id
     *
     * @param int $shop_id The unique positive non-zero numeric ID for an Etsy Shop.
     *
     * @return $this
     */
    public function setShopId($shop_id)
    {
        $this->container['shop_id'] = $shop_id;

        return $this;
    }

    /**
     * Gets accepts_returns
     *
     * @return bool
     */
    public function getAcceptsReturns()
    {
        return $this->container['accepts_returns'];
    }

    /**
     * Sets accepts_returns
     *
     * @param bool $accepts_returns return_policy_accepts_returns
     *
     * @return $this
     */
    public function setAcceptsReturns($accepts_returns)
    {
        $this->container['accepts_returns'] = $accepts_returns;

        return $this;
    }

    /**
     * Gets accepts_exchanges
     *
     * @return bool
     */
    public function getAcceptsExchanges()
    {
        return $this->container['accepts_exchanges'];
    }

    /**
     * Sets accepts_exchanges
     *
     * @param bool $accepts_exchanges return_policy_accepts_exchanges
     *
     * @return $this
     */
    public function setAcceptsExchanges($accepts_exchanges)
    {
        $this->container['accepts_exchanges'] = $accepts_exchanges;

        return $this;
    }

    /**
     * Gets return_deadline
     *
     * @return int
     */
    public function getReturnDeadline()
    {
        return $this->container['return_deadline'];
    }

    /**
     * Sets return_deadline
     *
     * @param int $return_deadline The deadline for the Return Policy, measured in days. The value must be one of the following: [7, 14, 21, 30, 45, 60, 90].
     *
     * @return $this
     */
    public function setReturnDeadline($return_deadline)
    {
        $this->container['return_deadline'] = $return_deadline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
