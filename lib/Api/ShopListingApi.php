<?php
/**
 * ShopListingApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ShopListingApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopListingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDraftListing
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $quantity quantity (optional)
     * @param  string $title title (optional)
     * @param  string $description description (optional)
     * @param  float $price price (optional)
     * @param  string $who_made who_made (optional)
     * @param  string $when_made when_made (optional)
     * @param  int $taxonomy_id taxonomy_id (optional)
     * @param  int $shipping_profile_id shipping_profile_id (optional)
     * @param  int $return_policy_id return_policy_id (optional)
     * @param  string[] $materials materials (optional)
     * @param  int $shop_section_id shop_section_id (optional)
     * @param  int $processing_min processing_min (optional)
     * @param  int $processing_max processing_max (optional)
     * @param  string[] $tags tags (optional)
     * @param  string[] $styles styles (optional)
     * @param  float $item_weight item_weight (optional)
     * @param  float $item_length item_length (optional)
     * @param  float $item_width item_width (optional)
     * @param  float $item_height item_height (optional)
     * @param  string $item_weight_unit item_weight_unit (optional)
     * @param  string $item_dimensions_unit item_dimensions_unit (optional)
     * @param  bool $is_personalizable is_personalizable (optional)
     * @param  bool $personalization_is_required personalization_is_required (optional)
     * @param  int $personalization_char_count_max personalization_char_count_max (optional)
     * @param  string $personalization_instructions personalization_instructions (optional)
     * @param  int[] $production_partner_ids production_partner_ids (optional)
     * @param  int[] $image_ids image_ids (optional)
     * @param  bool $is_supply is_supply (optional)
     * @param  bool $is_customizable is_customizable (optional)
     * @param  bool $should_auto_renew should_auto_renew (optional)
     * @param  bool $is_taxable is_taxable (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListing
     */
    public function createDraftListing($shop_id, $quantity = null, $title = null, $description = null, $price = null, $who_made = null, $when_made = null, $taxonomy_id = null, $shipping_profile_id = null, $return_policy_id = null, $materials = null, $shop_section_id = null, $processing_min = null, $processing_max = null, $tags = null, $styles = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $production_partner_ids = null, $image_ids = null, $is_supply = null, $is_customizable = null, $should_auto_renew = null, $is_taxable = null, $type = null)
    {
        list($response) = $this->createDraftListingWithHttpInfo($shop_id, $quantity, $title, $description, $price, $who_made, $when_made, $taxonomy_id, $shipping_profile_id, $return_policy_id, $materials, $shop_section_id, $processing_min, $processing_max, $tags, $styles, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $production_partner_ids, $image_ids, $is_supply, $is_customizable, $should_auto_renew, $is_taxable, $type);
        return $response;
    }

    /**
     * Operation createDraftListingWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $quantity (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  float $price (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $taxonomy_id (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  string[] $materials (optional)
     * @param  int $shop_section_id (optional)
     * @param  int $processing_min (optional)
     * @param  int $processing_max (optional)
     * @param  string[] $tags (optional)
     * @param  string[] $styles (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  int[] $image_ids (optional)
     * @param  bool $is_supply (optional)
     * @param  bool $is_customizable (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  bool $is_taxable (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDraftListingWithHttpInfo($shop_id, $quantity = null, $title = null, $description = null, $price = null, $who_made = null, $when_made = null, $taxonomy_id = null, $shipping_profile_id = null, $return_policy_id = null, $materials = null, $shop_section_id = null, $processing_min = null, $processing_max = null, $tags = null, $styles = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $production_partner_ids = null, $image_ids = null, $is_supply = null, $is_customizable = null, $should_auto_renew = null, $is_taxable = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->createDraftListingRequest($shop_id, $quantity, $title, $description, $price, $who_made, $when_made, $taxonomy_id, $shipping_profile_id, $return_policy_id, $materials, $shop_section_id, $processing_min, $processing_max, $tags, $styles, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $production_partner_ids, $image_ids, $is_supply, $is_customizable, $should_auto_renew, $is_taxable, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDraftListingAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $quantity (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  float $price (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $taxonomy_id (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  string[] $materials (optional)
     * @param  int $shop_section_id (optional)
     * @param  int $processing_min (optional)
     * @param  int $processing_max (optional)
     * @param  string[] $tags (optional)
     * @param  string[] $styles (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  int[] $image_ids (optional)
     * @param  bool $is_supply (optional)
     * @param  bool $is_customizable (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  bool $is_taxable (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDraftListingAsync($shop_id, $quantity = null, $title = null, $description = null, $price = null, $who_made = null, $when_made = null, $taxonomy_id = null, $shipping_profile_id = null, $return_policy_id = null, $materials = null, $shop_section_id = null, $processing_min = null, $processing_max = null, $tags = null, $styles = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $production_partner_ids = null, $image_ids = null, $is_supply = null, $is_customizable = null, $should_auto_renew = null, $is_taxable = null, $type = null)
    {
        return $this->createDraftListingAsyncWithHttpInfo($shop_id, $quantity, $title, $description, $price, $who_made, $when_made, $taxonomy_id, $shipping_profile_id, $return_policy_id, $materials, $shop_section_id, $processing_min, $processing_max, $tags, $styles, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $production_partner_ids, $image_ids, $is_supply, $is_customizable, $should_auto_renew, $is_taxable, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDraftListingAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $quantity (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  float $price (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $taxonomy_id (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  string[] $materials (optional)
     * @param  int $shop_section_id (optional)
     * @param  int $processing_min (optional)
     * @param  int $processing_max (optional)
     * @param  string[] $tags (optional)
     * @param  string[] $styles (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  int[] $image_ids (optional)
     * @param  bool $is_supply (optional)
     * @param  bool $is_customizable (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  bool $is_taxable (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDraftListingAsyncWithHttpInfo($shop_id, $quantity = null, $title = null, $description = null, $price = null, $who_made = null, $when_made = null, $taxonomy_id = null, $shipping_profile_id = null, $return_policy_id = null, $materials = null, $shop_section_id = null, $processing_min = null, $processing_max = null, $tags = null, $styles = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $production_partner_ids = null, $image_ids = null, $is_supply = null, $is_customizable = null, $should_auto_renew = null, $is_taxable = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->createDraftListingRequest($shop_id, $quantity, $title, $description, $price, $who_made, $when_made, $taxonomy_id, $shipping_profile_id, $return_policy_id, $materials, $shop_section_id, $processing_min, $processing_max, $tags, $styles, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $production_partner_ids, $image_ids, $is_supply, $is_customizable, $should_auto_renew, $is_taxable, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDraftListing'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $quantity (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  float $price (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $taxonomy_id (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  string[] $materials (optional)
     * @param  int $shop_section_id (optional)
     * @param  int $processing_min (optional)
     * @param  int $processing_max (optional)
     * @param  string[] $tags (optional)
     * @param  string[] $styles (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  int[] $image_ids (optional)
     * @param  bool $is_supply (optional)
     * @param  bool $is_customizable (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  bool $is_taxable (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDraftListingRequest($shop_id, $quantity = null, $title = null, $description = null, $price = null, $who_made = null, $when_made = null, $taxonomy_id = null, $shipping_profile_id = null, $return_policy_id = null, $materials = null, $shop_section_id = null, $processing_min = null, $processing_max = null, $tags = null, $styles = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $production_partner_ids = null, $image_ids = null, $is_supply = null, $is_customizable = null, $should_auto_renew = null, $is_taxable = null, $type = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createDraftListing'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // form params
        if ($quantity !== null) {
            $formParams['quantity'] = ObjectSerializer::toFormValue($quantity);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($who_made !== null) {
            $formParams['who_made'] = ObjectSerializer::toFormValue($who_made);
        }
        // form params
        if ($when_made !== null) {
            $formParams['when_made'] = ObjectSerializer::toFormValue($when_made);
        }
        // form params
        if ($taxonomy_id !== null) {
            $formParams['taxonomy_id'] = ObjectSerializer::toFormValue($taxonomy_id);
        }
        // form params
        if ($shipping_profile_id !== null) {
            $formParams['shipping_profile_id'] = ObjectSerializer::toFormValue($shipping_profile_id);
        }
        // form params
        if ($return_policy_id !== null) {
            $formParams['return_policy_id'] = ObjectSerializer::toFormValue($return_policy_id);
        }
        // form params
        if ($materials !== null) {
            $formParams['materials'] = ObjectSerializer::toFormValue($materials);
        }
        // form params
        if ($shop_section_id !== null) {
            $formParams['shop_section_id'] = ObjectSerializer::toFormValue($shop_section_id);
        }
        // form params
        if ($processing_min !== null) {
            $formParams['processing_min'] = ObjectSerializer::toFormValue($processing_min);
        }
        // form params
        if ($processing_max !== null) {
            $formParams['processing_max'] = ObjectSerializer::toFormValue($processing_max);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($styles !== null) {
            $formParams['styles'] = ObjectSerializer::toFormValue($styles);
        }
        // form params
        if ($item_weight !== null) {
            $formParams['item_weight'] = ObjectSerializer::toFormValue($item_weight);
        }
        // form params
        if ($item_length !== null) {
            $formParams['item_length'] = ObjectSerializer::toFormValue($item_length);
        }
        // form params
        if ($item_width !== null) {
            $formParams['item_width'] = ObjectSerializer::toFormValue($item_width);
        }
        // form params
        if ($item_height !== null) {
            $formParams['item_height'] = ObjectSerializer::toFormValue($item_height);
        }
        // form params
        if ($item_weight_unit !== null) {
            $formParams['item_weight_unit'] = ObjectSerializer::toFormValue($item_weight_unit);
        }
        // form params
        if ($item_dimensions_unit !== null) {
            $formParams['item_dimensions_unit'] = ObjectSerializer::toFormValue($item_dimensions_unit);
        }
        // form params
        if ($is_personalizable !== null) {
            $formParams['is_personalizable'] = ObjectSerializer::toFormValue($is_personalizable);
        }
        // form params
        if ($personalization_is_required !== null) {
            $formParams['personalization_is_required'] = ObjectSerializer::toFormValue($personalization_is_required);
        }
        // form params
        if ($personalization_char_count_max !== null) {
            $formParams['personalization_char_count_max'] = ObjectSerializer::toFormValue($personalization_char_count_max);
        }
        // form params
        if ($personalization_instructions !== null) {
            $formParams['personalization_instructions'] = ObjectSerializer::toFormValue($personalization_instructions);
        }
        // form params
        if ($production_partner_ids !== null) {
            $formParams['production_partner_ids'] = ObjectSerializer::toFormValue($production_partner_ids);
        }
        // form params
        if ($image_ids !== null) {
            $formParams['image_ids'] = ObjectSerializer::toFormValue($image_ids);
        }
        // form params
        if ($is_supply !== null) {
            $formParams['is_supply'] = ObjectSerializer::toFormValue($is_supply);
        }
        // form params
        if ($is_customizable !== null) {
            $formParams['is_customizable'] = ObjectSerializer::toFormValue($is_customizable);
        }
        // form params
        if ($should_auto_renew !== null) {
            $formParams['should_auto_renew'] = ObjectSerializer::toFormValue($should_auto_renew);
        }
        // form params
        if ($is_taxable !== null) {
            $formParams['is_taxable'] = ObjectSerializer::toFormValue($is_taxable);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteListing
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteListing($listing_id)
    {
        $this->deleteListingWithHttpInfo($listing_id);
    }

    /**
     * Operation deleteListingWithHttpInfo
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListingWithHttpInfo($listing_id)
    {
        $returnType = '';
        $request = $this->deleteListingRequest($listing_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListingAsync
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingAsync($listing_id)
    {
        return $this->deleteListingAsyncWithHttpInfo($listing_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListingAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingAsyncWithHttpInfo($listing_id)
    {
        $returnType = '';
        $request = $this->deleteListingRequest($listing_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteListing'
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteListingRequest($listing_id)
    {
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling deleteListing'
            );
        }

        $resourcePath = '/v3/application/listings/{listing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteListingProperty
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteListingProperty($shop_id, $listing_id, $property_id)
    {
        $this->deleteListingPropertyWithHttpInfo($shop_id, $listing_id, $property_id);
    }

    /**
     * Operation deleteListingPropertyWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListingPropertyWithHttpInfo($shop_id, $listing_id, $property_id)
    {
        $returnType = '';
        $request = $this->deleteListingPropertyRequest($shop_id, $listing_id, $property_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListingPropertyAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingPropertyAsync($shop_id, $listing_id, $property_id)
    {
        return $this->deleteListingPropertyAsyncWithHttpInfo($shop_id, $listing_id, $property_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListingPropertyAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListingPropertyAsyncWithHttpInfo($shop_id, $listing_id, $property_id)
    {
        $returnType = '';
        $request = $this->deleteListingPropertyRequest($shop_id, $listing_id, $property_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteListingProperty'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteListingPropertyRequest($shop_id, $listing_id, $property_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteListingProperty'
            );
        }
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling deleteListingProperty'
            );
        }
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling deleteListingProperty'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/{listing_id}/properties/{property_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }
        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'property_id' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllActiveListingsByShop
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function findAllActiveListingsByShop($shop_id, $limit = '25', $sort_on = 'created', $sort_order = 'desc', $offset = '0', $keywords = null)
    {
        list($response) = $this->findAllActiveListingsByShopWithHttpInfo($shop_id, $limit, $sort_on, $sort_order, $offset, $keywords);
        return $response;
    }

    /**
     * Operation findAllActiveListingsByShopWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllActiveListingsByShopWithHttpInfo($shop_id, $limit = '25', $sort_on = 'created', $sort_order = 'desc', $offset = '0', $keywords = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->findAllActiveListingsByShopRequest($shop_id, $limit, $sort_on, $sort_order, $offset, $keywords);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAllActiveListingsByShopAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllActiveListingsByShopAsync($shop_id, $limit = '25', $sort_on = 'created', $sort_order = 'desc', $offset = '0', $keywords = null)
    {
        return $this->findAllActiveListingsByShopAsyncWithHttpInfo($shop_id, $limit, $sort_on, $sort_order, $offset, $keywords)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllActiveListingsByShopAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllActiveListingsByShopAsyncWithHttpInfo($shop_id, $limit = '25', $sort_on = 'created', $sort_order = 'desc', $offset = '0', $keywords = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->findAllActiveListingsByShopRequest($shop_id, $limit, $sort_on, $sort_order, $offset, $keywords);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllActiveListingsByShop'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findAllActiveListingsByShopRequest($shop_id, $limit = '25', $sort_on = 'created', $sort_order = 'desc', $offset = '0', $keywords = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling findAllActiveListingsByShop'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($sort_on !== null) {
            $queryParams['sort_on'] = ObjectSerializer::toQueryValue($sort_on, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($keywords !== null) {
            $queryParams['keywords'] = ObjectSerializer::toQueryValue($keywords, null);
        }

        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findAllListingsActive
     *
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  float $min_price The minimum price of listings to be returned by a search result. (optional)
     * @param  float $max_price The maximum price of listings to be returned by a search result. (optional)
     * @param  int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (optional)
     * @param  string $shop_location Filters by shop location. If location cannot be parsed, Etsy responds with an error. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function findAllListingsActive($limit = '25', $offset = '0', $keywords = null, $sort_on = 'created', $sort_order = 'desc', $min_price = null, $max_price = null, $taxonomy_id = null, $shop_location = null)
    {
        list($response) = $this->findAllListingsActiveWithHttpInfo($limit, $offset, $keywords, $sort_on, $sort_order, $min_price, $max_price, $taxonomy_id, $shop_location);
        return $response;
    }

    /**
     * Operation findAllListingsActiveWithHttpInfo
     *
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  float $min_price The minimum price of listings to be returned by a search result. (optional)
     * @param  float $max_price The maximum price of listings to be returned by a search result. (optional)
     * @param  int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (optional)
     * @param  string $shop_location Filters by shop location. If location cannot be parsed, Etsy responds with an error. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function findAllListingsActiveWithHttpInfo($limit = '25', $offset = '0', $keywords = null, $sort_on = 'created', $sort_order = 'desc', $min_price = null, $max_price = null, $taxonomy_id = null, $shop_location = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->findAllListingsActiveRequest($limit, $offset, $keywords, $sort_on, $sort_order, $min_price, $max_price, $taxonomy_id, $shop_location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findAllListingsActiveAsync
     *
     * 
     *
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  float $min_price The minimum price of listings to be returned by a search result. (optional)
     * @param  float $max_price The maximum price of listings to be returned by a search result. (optional)
     * @param  int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (optional)
     * @param  string $shop_location Filters by shop location. If location cannot be parsed, Etsy responds with an error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllListingsActiveAsync($limit = '25', $offset = '0', $keywords = null, $sort_on = 'created', $sort_order = 'desc', $min_price = null, $max_price = null, $taxonomy_id = null, $shop_location = null)
    {
        return $this->findAllListingsActiveAsyncWithHttpInfo($limit, $offset, $keywords, $sort_on, $sort_order, $min_price, $max_price, $taxonomy_id, $shop_location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findAllListingsActiveAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  float $min_price The minimum price of listings to be returned by a search result. (optional)
     * @param  float $max_price The maximum price of listings to be returned by a search result. (optional)
     * @param  int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (optional)
     * @param  string $shop_location Filters by shop location. If location cannot be parsed, Etsy responds with an error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findAllListingsActiveAsyncWithHttpInfo($limit = '25', $offset = '0', $keywords = null, $sort_on = 'created', $sort_order = 'desc', $min_price = null, $max_price = null, $taxonomy_id = null, $shop_location = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->findAllListingsActiveRequest($limit, $offset, $keywords, $sort_on, $sort_order, $min_price, $max_price, $taxonomy_id, $shop_location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findAllListingsActive'
     *
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $keywords Search term or phrase that must appear in all results. (optional)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  float $min_price The minimum price of listings to be returned by a search result. (optional)
     * @param  float $max_price The maximum price of listings to be returned by a search result. (optional)
     * @param  int $taxonomy_id The numerical taxonomy ID of the listing. See [SellerTaxonomy](/documentation/reference#tag/SellerTaxonomy) and [BuyerTaxonomy](/documentation/reference#tag/BuyerTaxonomy) for more information. (optional)
     * @param  string $shop_location Filters by shop location. If location cannot be parsed, Etsy responds with an error. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findAllListingsActiveRequest($limit = '25', $offset = '0', $keywords = null, $sort_on = 'created', $sort_order = 'desc', $min_price = null, $max_price = null, $taxonomy_id = null, $shop_location = null)
    {

        $resourcePath = '/v3/application/listings/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($keywords !== null) {
            $queryParams['keywords'] = ObjectSerializer::toQueryValue($keywords, null);
        }
        // query params
        if ($sort_on !== null) {
            $queryParams['sort_on'] = ObjectSerializer::toQueryValue($sort_on, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($min_price !== null) {
            $queryParams['min_price'] = ObjectSerializer::toQueryValue($min_price, 'float');
        }
        // query params
        if ($max_price !== null) {
            $queryParams['max_price'] = ObjectSerializer::toQueryValue($max_price, 'float');
        }
        // query params
        if ($taxonomy_id !== null) {
            $queryParams['taxonomy_id'] = ObjectSerializer::toQueryValue($taxonomy_id, null);
        }
        // query params
        if ($shop_location !== null) {
            $queryParams['shop_location'] = ObjectSerializer::toQueryValue($shop_location, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFeaturedListingsByShop
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function getFeaturedListingsByShop($shop_id, $limit = '25', $offset = '0')
    {
        list($response) = $this->getFeaturedListingsByShopWithHttpInfo($shop_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getFeaturedListingsByShopWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeaturedListingsByShopWithHttpInfo($shop_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getFeaturedListingsByShopRequest($shop_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFeaturedListingsByShopAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturedListingsByShopAsync($shop_id, $limit = '25', $offset = '0')
    {
        return $this->getFeaturedListingsByShopAsyncWithHttpInfo($shop_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeaturedListingsByShopAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturedListingsByShopAsyncWithHttpInfo($shop_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getFeaturedListingsByShopRequest($shop_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeaturedListingsByShop'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFeaturedListingsByShopRequest($shop_id, $limit = '25', $offset = '0')
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getFeaturedListingsByShop'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/featured';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }

        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListing
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     * @param  string $language The IETF language tag for the language of this translation. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListingWithAssociations
     */
    public function getListing($listing_id, $includes = null, $language = null)
    {
        list($response) = $this->getListingWithHttpInfo($listing_id, $includes, $language);
        return $response;
    }

    /**
     * Operation getListingWithHttpInfo
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     * @param  string $language The IETF language tag for the language of this translation. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListingWithAssociations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingWithHttpInfo($listing_id, $includes = null, $language = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingWithAssociations';
        $request = $this->getListingRequest($listing_id, $includes, $language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListingWithAssociations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingAsync
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     * @param  string $language The IETF language tag for the language of this translation. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingAsync($listing_id, $includes = null, $language = null)
    {
        return $this->getListingAsyncWithHttpInfo($listing_id, $includes, $language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     * @param  string $language The IETF language tag for the language of this translation. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingAsyncWithHttpInfo($listing_id, $includes = null, $language = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingWithAssociations';
        $request = $this->getListingRequest($listing_id, $includes, $language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListing'
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     * @param  string $language The IETF language tag for the language of this translation. Ex: &#x60;de&#x60;, &#x60;en&#x60;, &#x60;es&#x60;, &#x60;fr&#x60;, &#x60;it&#x60;, &#x60;ja&#x60;, &#x60;nl&#x60;, &#x60;pl&#x60;, &#x60;pt&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingRequest($listing_id, $includes = null, $language = null)
    {
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling getListing'
            );
        }

        $resourcePath = '/v3/application/listings/{listing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($includes)) {
            $includes = ObjectSerializer::serializeCollection($includes, 'multi', true);
        }
        if ($includes !== null) {
            $queryParams['includes'] = ObjectSerializer::toQueryValue($includes, null);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language, null);
        }

        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingProperties
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingPropertyValues
     */
    public function getListingProperties($shop_id, $listing_id)
    {
        list($response) = $this->getListingPropertiesWithHttpInfo($shop_id, $listing_id);
        return $response;
    }

    /**
     * Operation getListingPropertiesWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingPropertyValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingPropertiesWithHttpInfo($shop_id, $listing_id)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValues';
        $request = $this->getListingPropertiesRequest($shop_id, $listing_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingPropertyValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingPropertiesAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingPropertiesAsync($shop_id, $listing_id)
    {
        return $this->getListingPropertiesAsyncWithHttpInfo($shop_id, $listing_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingPropertiesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingPropertiesAsyncWithHttpInfo($shop_id, $listing_id)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValues';
        $request = $this->getListingPropertiesRequest($shop_id, $listing_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingProperties'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingPropertiesRequest($shop_id, $listing_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingProperties'
            );
        }
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling getListingProperties'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/{listing_id}/properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingProperty
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingPropertyValue
     */
    public function getListingProperty($listing_id, $property_id)
    {
        list($response) = $this->getListingPropertyWithHttpInfo($listing_id, $property_id);
        return $response;
    }

    /**
     * Operation getListingPropertyWithHttpInfo
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingPropertyValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingPropertyWithHttpInfo($listing_id, $property_id)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValue';
        $request = $this->getListingPropertyRequest($listing_id, $property_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingPropertyValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 501:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingPropertyAsync
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingPropertyAsync($listing_id, $property_id)
    {
        return $this->getListingPropertyAsyncWithHttpInfo($listing_id, $property_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingPropertyAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingPropertyAsyncWithHttpInfo($listing_id, $property_id)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValue';
        $request = $this->getListingPropertyRequest($listing_id, $property_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingProperty'
     *
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingPropertyRequest($listing_id, $property_id)
    {
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling getListingProperty'
            );
        }
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling getListingProperty'
            );
        }

        $resourcePath = '/v3/application/listings/{listing_id}/properties/{property_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }
        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'property_id' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsByListingIds
     *
     * @param  int[] $listing_ids The list of numeric IDS for the listings in a specific Etsy shop. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListingsWithAssociations
     */
    public function getListingsByListingIds($listing_ids, $includes = null)
    {
        list($response) = $this->getListingsByListingIdsWithHttpInfo($listing_ids, $includes);
        return $response;
    }

    /**
     * Operation getListingsByListingIdsWithHttpInfo
     *
     * @param  int[] $listing_ids The list of numeric IDS for the listings in a specific Etsy shop. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListingsWithAssociations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsByListingIdsWithHttpInfo($listing_ids, $includes = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingsWithAssociations';
        $request = $this->getListingsByListingIdsRequest($listing_ids, $includes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListingsWithAssociations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsByListingIdsAsync
     *
     * 
     *
     * @param  int[] $listing_ids The list of numeric IDS for the listings in a specific Etsy shop. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByListingIdsAsync($listing_ids, $includes = null)
    {
        return $this->getListingsByListingIdsAsyncWithHttpInfo($listing_ids, $includes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsByListingIdsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int[] $listing_ids The list of numeric IDS for the listings in a specific Etsy shop. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByListingIdsAsyncWithHttpInfo($listing_ids, $includes = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingsWithAssociations';
        $request = $this->getListingsByListingIdsRequest($listing_ids, $includes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsByListingIds'
     *
     * @param  int[] $listing_ids The list of numeric IDS for the listings in a specific Etsy shop. (required)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingsByListingIdsRequest($listing_ids, $includes = null)
    {
        // verify the required parameter 'listing_ids' is set
        if ($listing_ids === null || (is_array($listing_ids) && count($listing_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_ids when calling getListingsByListingIds'
            );
        }

        $resourcePath = '/v3/application/listings/batch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($listing_ids)) {
            $listing_ids = ObjectSerializer::serializeCollection($listing_ids, 'multi', true);
        }
        if ($listing_ids !== null) {
            $queryParams['listing_ids'] = ObjectSerializer::toQueryValue($listing_ids, null);
        }
        // query params
        if (is_array($includes)) {
            $includes = ObjectSerializer::serializeCollection($includes, 'multi', true);
        }
        if ($includes !== null) {
            $queryParams['includes'] = ObjectSerializer::toQueryValue($includes, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsByShop
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $state When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com. (optional, default to active)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListingsWithAssociations
     */
    public function getListingsByShop($shop_id, $state = 'active', $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc', $includes = null)
    {
        list($response) = $this->getListingsByShopWithHttpInfo($shop_id, $state, $limit, $offset, $sort_on, $sort_order, $includes);
        return $response;
    }

    /**
     * Operation getListingsByShopWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $state When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com. (optional, default to active)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListingsWithAssociations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsByShopWithHttpInfo($shop_id, $state = 'active', $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc', $includes = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingsWithAssociations';
        $request = $this->getListingsByShopRequest($shop_id, $state, $limit, $offset, $sort_on, $sort_order, $includes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListingsWithAssociations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsByShopAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $state When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com. (optional, default to active)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopAsync($shop_id, $state = 'active', $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc', $includes = null)
    {
        return $this->getListingsByShopAsyncWithHttpInfo($shop_id, $state, $limit, $offset, $sort_on, $sort_order, $includes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsByShopAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $state When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com. (optional, default to active)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopAsyncWithHttpInfo($shop_id, $state = 'active', $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc', $includes = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListingsWithAssociations';
        $request = $this->getListingsByShopRequest($shop_id, $state, $limit, $offset, $sort_on, $sort_order, $includes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsByShop'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $state When _updating_ a listing, this value can be either &#x60;active&#x60; or &#x60;inactive&#x60;. Note: Setting a &#x60;draft&#x60; listing to &#x60;active&#x60; will also publish the listing on etsy.com and requires that the listing have an image set. Setting a &#x60;sold_out&#x60; listing to active will update the quantity to 1 and renew the listing on etsy.com. (optional, default to active)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     * @param  string[] $includes An enumerated string that attaches a valid association. Acceptable inputs are &#x27;Shipping&#x27;, &#x27;Shop&#x27;, &#x27;Images&#x27;, &#x27;User&#x27;, &#x27;Translations&#x27; and &#x27;Inventory&#x27;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingsByShopRequest($shop_id, $state = 'active', $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc', $includes = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingsByShop'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($sort_on !== null) {
            $queryParams['sort_on'] = ObjectSerializer::toQueryValue($sort_on, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if (is_array($includes)) {
            $includes = ObjectSerializer::serializeCollection($includes, 'multi', true);
        }
        if ($includes !== null) {
            $queryParams['includes'] = ObjectSerializer::toQueryValue($includes, null);
        }

        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsByShopReceipt
     *
     * @param  int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function getListingsByShopReceipt($receipt_id, $shop_id, $limit = '25', $offset = '0')
    {
        list($response) = $this->getListingsByShopReceiptWithHttpInfo($receipt_id, $shop_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getListingsByShopReceiptWithHttpInfo
     *
     * @param  int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsByShopReceiptWithHttpInfo($receipt_id, $shop_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopReceiptRequest($receipt_id, $shop_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsByShopReceiptAsync
     *
     * 
     *
     * @param  int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopReceiptAsync($receipt_id, $shop_id, $limit = '25', $offset = '0')
    {
        return $this->getListingsByShopReceiptAsyncWithHttpInfo($receipt_id, $shop_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsByShopReceiptAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopReceiptAsyncWithHttpInfo($receipt_id, $shop_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopReceiptRequest($receipt_id, $shop_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsByShopReceipt'
     *
     * @param  int $receipt_id The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction. (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingsByShopReceiptRequest($receipt_id, $shop_id, $limit = '25', $offset = '0')
    {
        // verify the required parameter 'receipt_id' is set
        if ($receipt_id === null || (is_array($receipt_id) && count($receipt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $receipt_id when calling getListingsByShopReceipt'
            );
        }
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingsByShopReceipt'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/receipts/{receipt_id}/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }

        // path params
        if ($receipt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'receipt_id' . '}',
                ObjectSerializer::toPathValue($receipt_id),
                $resourcePath
            );
        }
        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsByShopReturnPolicy
     *
     * @param  int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function getListingsByShopReturnPolicy($return_policy_id, $shop_id)
    {
        list($response) = $this->getListingsByShopReturnPolicyWithHttpInfo($return_policy_id, $shop_id);
        return $response;
    }

    /**
     * Operation getListingsByShopReturnPolicyWithHttpInfo
     *
     * @param  int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsByShopReturnPolicyWithHttpInfo($return_policy_id, $shop_id)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopReturnPolicyRequest($return_policy_id, $shop_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsByShopReturnPolicyAsync
     *
     * 
     *
     * @param  int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopReturnPolicyAsync($return_policy_id, $shop_id)
    {
        return $this->getListingsByShopReturnPolicyAsyncWithHttpInfo($return_policy_id, $shop_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsByShopReturnPolicyAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopReturnPolicyAsyncWithHttpInfo($return_policy_id, $shop_id)
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopReturnPolicyRequest($return_policy_id, $shop_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsByShopReturnPolicy'
     *
     * @param  int $return_policy_id The numeric ID of the [Return Policy](/documentation/reference#operation/getShopReturnPolicies). (required)
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingsByShopReturnPolicyRequest($return_policy_id, $shop_id)
    {
        // verify the required parameter 'return_policy_id' is set
        if ($return_policy_id === null || (is_array($return_policy_id) && count($return_policy_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $return_policy_id when calling getListingsByShopReturnPolicy'
            );
        }
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingsByShopReturnPolicy'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/policies/return/{return_policy_id}/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($return_policy_id !== null) {
            $resourcePath = str_replace(
                '{' . 'return_policy_id' . '}',
                ObjectSerializer::toPathValue($return_policy_id),
                $resourcePath
            );
        }
        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getListingsByShopSectionId
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int[] $shop_section_ids A list of numeric IDS for all sections in a specific Etsy shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListings
     */
    public function getListingsByShopSectionId($shop_id, $shop_section_ids, $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc')
    {
        list($response) = $this->getListingsByShopSectionIdWithHttpInfo($shop_id, $shop_section_ids, $limit, $offset, $sort_on, $sort_order);
        return $response;
    }

    /**
     * Operation getListingsByShopSectionIdWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int[] $shop_section_ids A list of numeric IDS for all sections in a specific Etsy shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListingsByShopSectionIdWithHttpInfo($shop_id, $shop_section_ids, $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopSectionIdRequest($shop_id, $shop_section_ids, $limit, $offset, $sort_on, $sort_order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListingsByShopSectionIdAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int[] $shop_section_ids A list of numeric IDS for all sections in a specific Etsy shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopSectionIdAsync($shop_id, $shop_section_ids, $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc')
    {
        return $this->getListingsByShopSectionIdAsyncWithHttpInfo($shop_id, $shop_section_ids, $limit, $offset, $sort_on, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListingsByShopSectionIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int[] $shop_section_ids A list of numeric IDS for all sections in a specific Etsy shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListingsByShopSectionIdAsyncWithHttpInfo($shop_id, $shop_section_ids, $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc')
    {
        $returnType = '\Swagger\Client\Model\ShopListings';
        $request = $this->getListingsByShopSectionIdRequest($shop_id, $shop_section_ids, $limit, $offset, $sort_on, $sort_order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getListingsByShopSectionId'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int[] $shop_section_ids A list of numeric IDS for all sections in a specific Etsy shop. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     * @param  string $sort_on The value to sort a search result of listings on. NOTES: a) &#x60;sort_on&#x60; only works when combined with one of the search options (keywords, region, etc.). b) when using &#x60;score&#x60; the returned results will always be in _descending_ order, regardless of the &#x60;sort_order&#x60; parameter. (optional, default to created)
     * @param  string $sort_order The ascending(up) or descending(down) order to sort listings by. NOTE: sort_order only works when combined with one of the search options (keywords, region, etc.). (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getListingsByShopSectionIdRequest($shop_id, $shop_section_ids, $limit = '25', $offset = '0', $sort_on = 'created', $sort_order = 'desc')
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getListingsByShopSectionId'
            );
        }
        // verify the required parameter 'shop_section_ids' is set
        if ($shop_section_ids === null || (is_array($shop_section_ids) && count($shop_section_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_section_ids when calling getListingsByShopSectionId'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shop-sections/listings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($shop_section_ids)) {
            $shop_section_ids = ObjectSerializer::serializeCollection($shop_section_ids, 'multi', true);
        }
        if ($shop_section_ids !== null) {
            $queryParams['shop_section_ids'] = ObjectSerializer::toQueryValue($shop_section_ids, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($sort_on !== null) {
            $queryParams['sort_on'] = ObjectSerializer::toQueryValue($sort_on, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sort_order'] = ObjectSerializer::toQueryValue($sort_order, null);
        }

        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListing
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids image_ids (optional)
     * @param  string $title title (optional)
     * @param  string $description description (optional)
     * @param  string[] $materials materials (optional)
     * @param  bool $should_auto_renew should_auto_renew (optional)
     * @param  int $shipping_profile_id shipping_profile_id (optional)
     * @param  int $return_policy_id return_policy_id (optional)
     * @param  int $shop_section_id shop_section_id (optional)
     * @param  float $item_weight item_weight (optional)
     * @param  float $item_length item_length (optional)
     * @param  float $item_width item_width (optional)
     * @param  float $item_height item_height (optional)
     * @param  string $item_weight_unit item_weight_unit (optional)
     * @param  string $item_dimensions_unit item_dimensions_unit (optional)
     * @param  bool $is_taxable is_taxable (optional)
     * @param  int $taxonomy_id taxonomy_id (optional)
     * @param  string[] $tags tags (optional)
     * @param  string $who_made who_made (optional)
     * @param  string $when_made when_made (optional)
     * @param  int $featured_rank featured_rank (optional)
     * @param  bool $is_personalizable is_personalizable (optional)
     * @param  bool $personalization_is_required personalization_is_required (optional)
     * @param  int $personalization_char_count_max personalization_char_count_max (optional)
     * @param  string $personalization_instructions personalization_instructions (optional)
     * @param  string $state state (optional)
     * @param  bool $is_supply is_supply (optional)
     * @param  int[] $production_partner_ids production_partner_ids (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListing
     */
    public function updateListing($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $return_policy_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        list($response) = $this->updateListingWithHttpInfo($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $return_policy_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);
        return $response;
    }

    /**
     * Operation updateListingWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingWithHttpInfo($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $return_policy_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->updateListingRequest($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $return_policy_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingAsync($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $return_policy_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        return $this->updateListingAsyncWithHttpInfo($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $return_policy_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingAsyncWithHttpInfo($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $return_policy_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->updateListingRequest($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $return_policy_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListing'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $return_policy_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateListingRequest($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $return_policy_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListing'
            );
        }
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling updateListing'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/{listing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }

        // form params
        if ($image_ids !== null) {
            $formParams['image_ids'] = ObjectSerializer::toFormValue($image_ids);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($materials !== null) {
            $formParams['materials'] = ObjectSerializer::toFormValue($materials);
        }
        // form params
        if ($should_auto_renew !== null) {
            $formParams['should_auto_renew'] = ObjectSerializer::toFormValue($should_auto_renew);
        }
        // form params
        if ($shipping_profile_id !== null) {
            $formParams['shipping_profile_id'] = ObjectSerializer::toFormValue($shipping_profile_id);
        }
        // form params
        if ($return_policy_id !== null) {
            $formParams['return_policy_id'] = ObjectSerializer::toFormValue($return_policy_id);
        }
        // form params
        if ($shop_section_id !== null) {
            $formParams['shop_section_id'] = ObjectSerializer::toFormValue($shop_section_id);
        }
        // form params
        if ($item_weight !== null) {
            $formParams['item_weight'] = ObjectSerializer::toFormValue($item_weight);
        }
        // form params
        if ($item_length !== null) {
            $formParams['item_length'] = ObjectSerializer::toFormValue($item_length);
        }
        // form params
        if ($item_width !== null) {
            $formParams['item_width'] = ObjectSerializer::toFormValue($item_width);
        }
        // form params
        if ($item_height !== null) {
            $formParams['item_height'] = ObjectSerializer::toFormValue($item_height);
        }
        // form params
        if ($item_weight_unit !== null) {
            $formParams['item_weight_unit'] = ObjectSerializer::toFormValue($item_weight_unit);
        }
        // form params
        if ($item_dimensions_unit !== null) {
            $formParams['item_dimensions_unit'] = ObjectSerializer::toFormValue($item_dimensions_unit);
        }
        // form params
        if ($is_taxable !== null) {
            $formParams['is_taxable'] = ObjectSerializer::toFormValue($is_taxable);
        }
        // form params
        if ($taxonomy_id !== null) {
            $formParams['taxonomy_id'] = ObjectSerializer::toFormValue($taxonomy_id);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($who_made !== null) {
            $formParams['who_made'] = ObjectSerializer::toFormValue($who_made);
        }
        // form params
        if ($when_made !== null) {
            $formParams['when_made'] = ObjectSerializer::toFormValue($when_made);
        }
        // form params
        if ($featured_rank !== null) {
            $formParams['featured_rank'] = ObjectSerializer::toFormValue($featured_rank);
        }
        // form params
        if ($is_personalizable !== null) {
            $formParams['is_personalizable'] = ObjectSerializer::toFormValue($is_personalizable);
        }
        // form params
        if ($personalization_is_required !== null) {
            $formParams['personalization_is_required'] = ObjectSerializer::toFormValue($personalization_is_required);
        }
        // form params
        if ($personalization_char_count_max !== null) {
            $formParams['personalization_char_count_max'] = ObjectSerializer::toFormValue($personalization_char_count_max);
        }
        // form params
        if ($personalization_instructions !== null) {
            $formParams['personalization_instructions'] = ObjectSerializer::toFormValue($personalization_instructions);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($is_supply !== null) {
            $formParams['is_supply'] = ObjectSerializer::toFormValue($is_supply);
        }
        // form params
        if ($production_partner_ids !== null) {
            $formParams['production_partner_ids'] = ObjectSerializer::toFormValue($production_partner_ids);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListingDeprecated
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids image_ids (optional)
     * @param  string $title title (optional)
     * @param  string $description description (optional)
     * @param  string[] $materials materials (optional)
     * @param  bool $should_auto_renew should_auto_renew (optional)
     * @param  int $shipping_profile_id shipping_profile_id (optional)
     * @param  int $shop_section_id shop_section_id (optional)
     * @param  float $item_weight item_weight (optional)
     * @param  float $item_length item_length (optional)
     * @param  float $item_width item_width (optional)
     * @param  float $item_height item_height (optional)
     * @param  string $item_weight_unit item_weight_unit (optional)
     * @param  string $item_dimensions_unit item_dimensions_unit (optional)
     * @param  bool $is_taxable is_taxable (optional)
     * @param  int $taxonomy_id taxonomy_id (optional)
     * @param  string[] $tags tags (optional)
     * @param  string $who_made who_made (optional)
     * @param  string $when_made when_made (optional)
     * @param  int $featured_rank featured_rank (optional)
     * @param  bool $is_personalizable is_personalizable (optional)
     * @param  bool $personalization_is_required personalization_is_required (optional)
     * @param  int $personalization_char_count_max personalization_char_count_max (optional)
     * @param  string $personalization_instructions personalization_instructions (optional)
     * @param  string $state state (optional)
     * @param  bool $is_supply is_supply (optional)
     * @param  int[] $production_partner_ids production_partner_ids (optional)
     * @param  string $type type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopListing
     */
    public function updateListingDeprecated($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        list($response) = $this->updateListingDeprecatedWithHttpInfo($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);
        return $response;
    }

    /**
     * Operation updateListingDeprecatedWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingDeprecatedWithHttpInfo($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->updateListingDeprecatedRequest($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingDeprecatedAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingDeprecatedAsync($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        return $this->updateListingDeprecatedAsyncWithHttpInfo($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingDeprecatedAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingDeprecatedAsyncWithHttpInfo($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        $returnType = '\Swagger\Client\Model\ShopListing';
        $request = $this->updateListingDeprecatedRequest($shop_id, $listing_id, $image_ids, $title, $description, $materials, $should_auto_renew, $shipping_profile_id, $shop_section_id, $item_weight, $item_length, $item_width, $item_height, $item_weight_unit, $item_dimensions_unit, $is_taxable, $taxonomy_id, $tags, $who_made, $when_made, $featured_rank, $is_personalizable, $personalization_is_required, $personalization_char_count_max, $personalization_instructions, $state, $is_supply, $production_partner_ids, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListingDeprecated'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int[] $image_ids (optional)
     * @param  string $title (optional)
     * @param  string $description (optional)
     * @param  string[] $materials (optional)
     * @param  bool $should_auto_renew (optional)
     * @param  int $shipping_profile_id (optional)
     * @param  int $shop_section_id (optional)
     * @param  float $item_weight (optional)
     * @param  float $item_length (optional)
     * @param  float $item_width (optional)
     * @param  float $item_height (optional)
     * @param  string $item_weight_unit (optional)
     * @param  string $item_dimensions_unit (optional)
     * @param  bool $is_taxable (optional)
     * @param  int $taxonomy_id (optional)
     * @param  string[] $tags (optional)
     * @param  string $who_made (optional)
     * @param  string $when_made (optional)
     * @param  int $featured_rank (optional)
     * @param  bool $is_personalizable (optional)
     * @param  bool $personalization_is_required (optional)
     * @param  int $personalization_char_count_max (optional)
     * @param  string $personalization_instructions (optional)
     * @param  string $state (optional)
     * @param  bool $is_supply (optional)
     * @param  int[] $production_partner_ids (optional)
     * @param  string $type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateListingDeprecatedRequest($shop_id, $listing_id, $image_ids = null, $title = null, $description = null, $materials = null, $should_auto_renew = null, $shipping_profile_id = null, $shop_section_id = null, $item_weight = null, $item_length = null, $item_width = null, $item_height = null, $item_weight_unit = null, $item_dimensions_unit = null, $is_taxable = null, $taxonomy_id = null, $tags = null, $who_made = null, $when_made = null, $featured_rank = null, $is_personalizable = null, $personalization_is_required = null, $personalization_char_count_max = null, $personalization_instructions = null, $state = null, $is_supply = null, $production_partner_ids = null, $type = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListingDeprecated'
            );
        }
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling updateListingDeprecated'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/{listing_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }

        // form params
        if ($image_ids !== null) {
            $formParams['image_ids'] = ObjectSerializer::toFormValue($image_ids);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($materials !== null) {
            $formParams['materials'] = ObjectSerializer::toFormValue($materials);
        }
        // form params
        if ($should_auto_renew !== null) {
            $formParams['should_auto_renew'] = ObjectSerializer::toFormValue($should_auto_renew);
        }
        // form params
        if ($shipping_profile_id !== null) {
            $formParams['shipping_profile_id'] = ObjectSerializer::toFormValue($shipping_profile_id);
        }
        // form params
        if ($shop_section_id !== null) {
            $formParams['shop_section_id'] = ObjectSerializer::toFormValue($shop_section_id);
        }
        // form params
        if ($item_weight !== null) {
            $formParams['item_weight'] = ObjectSerializer::toFormValue($item_weight);
        }
        // form params
        if ($item_length !== null) {
            $formParams['item_length'] = ObjectSerializer::toFormValue($item_length);
        }
        // form params
        if ($item_width !== null) {
            $formParams['item_width'] = ObjectSerializer::toFormValue($item_width);
        }
        // form params
        if ($item_height !== null) {
            $formParams['item_height'] = ObjectSerializer::toFormValue($item_height);
        }
        // form params
        if ($item_weight_unit !== null) {
            $formParams['item_weight_unit'] = ObjectSerializer::toFormValue($item_weight_unit);
        }
        // form params
        if ($item_dimensions_unit !== null) {
            $formParams['item_dimensions_unit'] = ObjectSerializer::toFormValue($item_dimensions_unit);
        }
        // form params
        if ($is_taxable !== null) {
            $formParams['is_taxable'] = ObjectSerializer::toFormValue($is_taxable);
        }
        // form params
        if ($taxonomy_id !== null) {
            $formParams['taxonomy_id'] = ObjectSerializer::toFormValue($taxonomy_id);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = ObjectSerializer::toFormValue($tags);
        }
        // form params
        if ($who_made !== null) {
            $formParams['who_made'] = ObjectSerializer::toFormValue($who_made);
        }
        // form params
        if ($when_made !== null) {
            $formParams['when_made'] = ObjectSerializer::toFormValue($when_made);
        }
        // form params
        if ($featured_rank !== null) {
            $formParams['featured_rank'] = ObjectSerializer::toFormValue($featured_rank);
        }
        // form params
        if ($is_personalizable !== null) {
            $formParams['is_personalizable'] = ObjectSerializer::toFormValue($is_personalizable);
        }
        // form params
        if ($personalization_is_required !== null) {
            $formParams['personalization_is_required'] = ObjectSerializer::toFormValue($personalization_is_required);
        }
        // form params
        if ($personalization_char_count_max !== null) {
            $formParams['personalization_char_count_max'] = ObjectSerializer::toFormValue($personalization_char_count_max);
        }
        // form params
        if ($personalization_instructions !== null) {
            $formParams['personalization_instructions'] = ObjectSerializer::toFormValue($personalization_instructions);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($is_supply !== null) {
            $formParams['is_supply'] = ObjectSerializer::toFormValue($is_supply);
        }
        // form params
        if ($production_partner_ids !== null) {
            $formParams['production_partner_ids'] = ObjectSerializer::toFormValue($production_partner_ids);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateListingProperty
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     * @param  int[] $value_ids value_ids (optional)
     * @param  string[] $values values (optional)
     * @param  int $scale_id scale_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ListingPropertyValue
     */
    public function updateListingProperty($shop_id, $listing_id, $property_id, $value_ids = null, $values = null, $scale_id = null)
    {
        list($response) = $this->updateListingPropertyWithHttpInfo($shop_id, $listing_id, $property_id, $value_ids, $values, $scale_id);
        return $response;
    }

    /**
     * Operation updateListingPropertyWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     * @param  int[] $value_ids (optional)
     * @param  string[] $values (optional)
     * @param  int $scale_id (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ListingPropertyValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateListingPropertyWithHttpInfo($shop_id, $listing_id, $property_id, $value_ids = null, $values = null, $scale_id = null)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValue';
        $request = $this->updateListingPropertyRequest($shop_id, $listing_id, $property_id, $value_ids, $values, $scale_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ListingPropertyValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateListingPropertyAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     * @param  int[] $value_ids (optional)
     * @param  string[] $values (optional)
     * @param  int $scale_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingPropertyAsync($shop_id, $listing_id, $property_id, $value_ids = null, $values = null, $scale_id = null)
    {
        return $this->updateListingPropertyAsyncWithHttpInfo($shop_id, $listing_id, $property_id, $value_ids, $values, $scale_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateListingPropertyAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     * @param  int[] $value_ids (optional)
     * @param  string[] $values (optional)
     * @param  int $scale_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateListingPropertyAsyncWithHttpInfo($shop_id, $listing_id, $property_id, $value_ids = null, $values = null, $scale_id = null)
    {
        $returnType = '\Swagger\Client\Model\ListingPropertyValue';
        $request = $this->updateListingPropertyRequest($shop_id, $listing_id, $property_id, $value_ids, $values, $scale_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateListingProperty'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $listing_id The numeric ID for the [listing](/documentation/reference#tag/ShopListing) associated to this transaction. (required)
     * @param  int $property_id The unique ID of an Etsy [listing property](/documentation/reference#operation/getListingProperties). (required)
     * @param  int[] $value_ids (optional)
     * @param  string[] $values (optional)
     * @param  int $scale_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateListingPropertyRequest($shop_id, $listing_id, $property_id, $value_ids = null, $values = null, $scale_id = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateListingProperty'
            );
        }
        // verify the required parameter 'listing_id' is set
        if ($listing_id === null || (is_array($listing_id) && count($listing_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listing_id when calling updateListingProperty'
            );
        }
        // verify the required parameter 'property_id' is set
        if ($property_id === null || (is_array($property_id) && count($property_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $property_id when calling updateListingProperty'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/listings/{listing_id}/properties/{property_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($listing_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listing_id' . '}',
                ObjectSerializer::toPathValue($listing_id),
                $resourcePath
            );
        }
        // path params
        if ($property_id !== null) {
            $resourcePath = str_replace(
                '{' . 'property_id' . '}',
                ObjectSerializer::toPathValue($property_id),
                $resourcePath
            );
        }

        // form params
        if ($value_ids !== null) {
            $formParams['value_ids'] = ObjectSerializer::toFormValue($value_ids);
        }
        // form params
        if ($values !== null) {
            $formParams['values'] = ObjectSerializer::toFormValue($values);
        }
        // form params
        if ($scale_id !== null) {
            $formParams['scale_id'] = ObjectSerializer::toFormValue($scale_id);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
