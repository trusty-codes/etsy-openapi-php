<?php
/**
 * ShopShippingProfileApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Etsy Open API v3
 *
 * <div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2023 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.
 *
 * OpenAPI spec version: 3.0.0
 * Contact: developers@etsy.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.42
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ShopShippingProfileApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShopShippingProfileApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createShopShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title title (optional)
     * @param  string $origin_country_iso origin_country_iso (optional)
     * @param  float $primary_cost primary_cost (optional)
     * @param  float $secondary_cost secondary_cost (optional)
     * @param  int $min_processing_time min_processing_time (optional)
     * @param  int $max_processing_time max_processing_time (optional)
     * @param  string $processing_time_unit processing_time_unit (optional)
     * @param  string $destination_country_iso destination_country_iso (optional)
     * @param  string $destination_region destination_region (optional)
     * @param  string $origin_postal_code origin_postal_code (optional)
     * @param  int $shipping_carrier_id shipping_carrier_id (optional)
     * @param  string $mail_class mail_class (optional)
     * @param  int $min_delivery_days min_delivery_days (optional)
     * @param  int $max_delivery_days max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfile
     */
    public function createShopShippingProfile($shop_id, $title = null, $origin_country_iso = null, $primary_cost = null, $secondary_cost = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $destination_country_iso = null, $destination_region = null, $origin_postal_code = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createShopShippingProfileWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createShopShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  string $origin_postal_code (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShopShippingProfileWithHttpInfo($shop_id, $title = null, $origin_country_iso = null, $primary_cost = null, $secondary_cost = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $destination_country_iso = null, $destination_region = null, $origin_postal_code = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->createShopShippingProfileRequest($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShopShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  string $origin_postal_code (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileAsync($shop_id, $title = null, $origin_country_iso = null, $primary_cost = null, $secondary_cost = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $destination_country_iso = null, $destination_region = null, $origin_postal_code = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createShopShippingProfileAsyncWithHttpInfo($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShopShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  string $origin_postal_code (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileAsyncWithHttpInfo($shop_id, $title = null, $origin_country_iso = null, $primary_cost = null, $secondary_cost = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $destination_country_iso = null, $destination_region = null, $origin_postal_code = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->createShopShippingProfileRequest($shop_id, $title, $origin_country_iso, $primary_cost, $secondary_cost, $min_processing_time, $max_processing_time, $processing_time_unit, $destination_country_iso, $destination_region, $origin_postal_code, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShopShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  string $origin_postal_code (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShopShippingProfileRequest($shop_id, $title = null, $origin_country_iso = null, $primary_cost = null, $secondary_cost = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $destination_country_iso = null, $destination_region = null, $origin_postal_code = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createShopShippingProfile'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($origin_country_iso !== null) {
            $formParams['origin_country_iso'] = ObjectSerializer::toFormValue($origin_country_iso);
        }
        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($min_processing_time !== null) {
            $formParams['min_processing_time'] = ObjectSerializer::toFormValue($min_processing_time);
        }
        // form params
        if ($max_processing_time !== null) {
            $formParams['max_processing_time'] = ObjectSerializer::toFormValue($max_processing_time);
        }
        // form params
        if ($processing_time_unit !== null) {
            $formParams['processing_time_unit'] = ObjectSerializer::toFormValue($processing_time_unit);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($origin_postal_code !== null) {
            $formParams['origin_postal_code'] = ObjectSerializer::toFormValue($origin_postal_code);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShopShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  float $primary_cost primary_cost (optional)
     * @param  float $secondary_cost secondary_cost (optional)
     * @param  string $destination_country_iso destination_country_iso (optional)
     * @param  string $destination_region destination_region (optional)
     * @param  int $shipping_carrier_id shipping_carrier_id (optional)
     * @param  string $mail_class mail_class (optional)
     * @param  int $min_delivery_days min_delivery_days (optional)
     * @param  int $max_delivery_days max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileDestination
     */
    public function createShopShippingProfileDestination($shop_id, $shipping_profile_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createShopShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileDestination, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestination';
        $request = $this->createShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileDestination',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShopShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileDestinationAsync($shop_id, $shipping_profile_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShopShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestination';
        $request = $this->createShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShopShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createShopShippingProfileDestination'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling createShopShippingProfileDestination'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShopShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $type type (optional)
     * @param  string $upgrade_name upgrade_name (optional)
     * @param  float $price price (optional)
     * @param  float $secondary_price secondary_price (optional)
     * @param  int $shipping_carrier_id shipping_carrier_id (optional)
     * @param  string $mail_class mail_class (optional)
     * @param  int $min_delivery_days min_delivery_days (optional)
     * @param  int $max_delivery_days max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileUpgrade
     */
    public function createShopShippingProfileUpgrade($shop_id, $shipping_profile_id, $type = null, $upgrade_name = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->createShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation createShopShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $type (optional)
     * @param  string $upgrade_name (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileUpgrade, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $type = null, $upgrade_name = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrade';
        $request = $this->createShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileUpgrade',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShopShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $type (optional)
     * @param  string $upgrade_name (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $type = null, $upgrade_name = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->createShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShopShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $type (optional)
     * @param  string $upgrade_name (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $type = null, $upgrade_name = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrade';
        $request = $this->createShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type, $upgrade_name, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShopShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $type (optional)
     * @param  string $upgrade_name (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $type = null, $upgrade_name = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling createShopShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling createShopShippingProfileUpgrade'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($upgrade_name !== null) {
            $formParams['upgrade_name'] = ObjectSerializer::toFormValue($upgrade_name);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($secondary_price !== null) {
            $formParams['secondary_price'] = ObjectSerializer::toFormValue($secondary_price);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShopShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteShopShippingProfile($shop_id, $shipping_profile_id)
    {
        $this->deleteShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id);
    }

    /**
     * Operation deleteShopShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileAsync($shop_id, $shipping_profile_id)
    {
        return $this->deleteShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShopShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopShippingProfileRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteShopShippingProfile'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling deleteShopShippingProfile'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShopShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteShopShippingProfileDestination($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
    {
        $this->deleteShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id);
    }

    /**
     * Operation deleteShopShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileDestinationAsync($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
    {
        return $this->deleteShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShopShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteShopShippingProfileDestination'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling deleteShopShippingProfileDestination'
            );
        }
        // verify the required parameter 'shipping_profile_destination_id' is set
        if ($shipping_profile_destination_id === null || (is_array($shipping_profile_destination_id) && count($shipping_profile_destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_destination_id when calling deleteShopShippingProfileDestination'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations/{shipping_profile_destination_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_destination_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_destination_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteShopShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the shipping profile. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteShopShippingProfileUpgrade($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $this->deleteShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id);
    }

    /**
     * Operation deleteShopShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the shipping profile. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteShopShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the shipping profile. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $upgrade_id)
    {
        return $this->deleteShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteShopShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the shipping profile. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id)
    {
        $returnType = '';
        $request = $this->deleteShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteShopShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the shipping profile. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling deleteShopShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling deleteShopShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'upgrade_id' is set
        if ($upgrade_id === null || (is_array($upgrade_id) && count($upgrade_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_id when calling deleteShopShippingProfileUpgrade'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($upgrade_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upgrade_id' . '}',
                ObjectSerializer::toPathValue($upgrade_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShippingCarriers
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShippingCarriers
     */
    public function getShippingCarriers($origin_country_iso)
    {
        list($response) = $this->getShippingCarriersWithHttpInfo($origin_country_iso);
        return $response;
    }

    /**
     * Operation getShippingCarriersWithHttpInfo
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShippingCarriers, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShippingCarriersWithHttpInfo($origin_country_iso)
    {
        $returnType = '\Swagger\Client\Model\ShippingCarriers';
        $request = $this->getShippingCarriersRequest($origin_country_iso);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShippingCarriers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShippingCarriersAsync
     *
     * 
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShippingCarriersAsync($origin_country_iso)
    {
        return $this->getShippingCarriersAsyncWithHttpInfo($origin_country_iso)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShippingCarriersAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShippingCarriersAsyncWithHttpInfo($origin_country_iso)
    {
        $returnType = '\Swagger\Client\Model\ShippingCarriers';
        $request = $this->getShippingCarriersRequest($origin_country_iso);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShippingCarriers'
     *
     * @param  string $origin_country_iso The ISO code of the country from which the listing ships. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShippingCarriersRequest($origin_country_iso)
    {
        // verify the required parameter 'origin_country_iso' is set
        if ($origin_country_iso === null || (is_array($origin_country_iso) && count($origin_country_iso) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $origin_country_iso when calling getShippingCarriers'
            );
        }

        $resourcePath = '/v3/application/shipping-carriers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($origin_country_iso !== null) {
            $queryParams['origin_country_iso'] = ObjectSerializer::toQueryValue($origin_country_iso, 'ISO 3166-1 alpha-2');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfile
     */
    public function getShopShippingProfile($shop_id, $shipping_profile_id)
    {
        list($response) = $this->getShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id);
        return $response;
    }

    /**
     * Operation getShopShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->getShopShippingProfileRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileAsync($shop_id, $shipping_profile_id)
    {
        return $this->getShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->getShopShippingProfileRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopShippingProfileRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getShopShippingProfile'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getShopShippingProfile'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopShippingProfileDestinationsByShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileDestinations
     */
    public function getShopShippingProfileDestinationsByShippingProfile($shop_id, $shipping_profile_id, $limit = '25', $offset = '0')
    {
        list($response) = $this->getShopShippingProfileDestinationsByShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $limit, $offset);
        return $response;
    }

    /**
     * Operation getShopShippingProfileDestinationsByShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileDestinations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopShippingProfileDestinationsByShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestinations';
        $request = $this->getShopShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileDestinations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopShippingProfileDestinationsByShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileDestinationsByShippingProfileAsync($shop_id, $shipping_profile_id, $limit = '25', $offset = '0')
    {
        return $this->getShopShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileDestinationsByShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $limit = '25', $offset = '0')
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestinations';
        $request = $this->getShopShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopShippingProfileDestinationsByShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $limit The maximum number of results to return. (optional, default to 25)
     * @param  int $offset The number of records to skip before selecting the first result. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopShippingProfileDestinationsByShippingProfileRequest($shop_id, $shipping_profile_id, $limit = '25', $offset = '0')
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getShopShippingProfileDestinationsByShippingProfile'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getShopShippingProfileDestinationsByShippingProfile'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }

        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopShippingProfileUpgrades
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileUpgrades
     */
    public function getShopShippingProfileUpgrades($shop_id, $shipping_profile_id)
    {
        list($response) = $this->getShopShippingProfileUpgradesWithHttpInfo($shop_id, $shipping_profile_id);
        return $response;
    }

    /**
     * Operation getShopShippingProfileUpgradesWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileUpgrades, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopShippingProfileUpgradesWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrades';
        $request = $this->getShopShippingProfileUpgradesRequest($shop_id, $shipping_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileUpgrades',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopShippingProfileUpgradesAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileUpgradesAsync($shop_id, $shipping_profile_id)
    {
        return $this->getShopShippingProfileUpgradesAsyncWithHttpInfo($shop_id, $shipping_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopShippingProfileUpgradesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfileUpgradesAsyncWithHttpInfo($shop_id, $shipping_profile_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrades';
        $request = $this->getShopShippingProfileUpgradesRequest($shop_id, $shipping_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopShippingProfileUpgrades'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopShippingProfileUpgradesRequest($shop_id, $shipping_profile_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getShopShippingProfileUpgrades'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling getShopShippingProfileUpgrades'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShopShippingProfiles
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfiles
     */
    public function getShopShippingProfiles($shop_id)
    {
        list($response) = $this->getShopShippingProfilesWithHttpInfo($shop_id);
        return $response;
    }

    /**
     * Operation getShopShippingProfilesWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShopShippingProfilesWithHttpInfo($shop_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfiles';
        $request = $this->getShopShippingProfilesRequest($shop_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShopShippingProfilesAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfilesAsync($shop_id)
    {
        return $this->getShopShippingProfilesAsyncWithHttpInfo($shop_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShopShippingProfilesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShopShippingProfilesAsyncWithHttpInfo($shop_id)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfiles';
        $request = $this->getShopShippingProfilesRequest($shop_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShopShippingProfiles'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShopShippingProfilesRequest($shop_id)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling getShopShippingProfiles'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShopShippingProfile
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $title title (optional)
     * @param  string $origin_country_iso origin_country_iso (optional)
     * @param  int $min_processing_time min_processing_time (optional)
     * @param  int $max_processing_time max_processing_time (optional)
     * @param  string $processing_time_unit processing_time_unit (optional)
     * @param  string $origin_postal_code origin_postal_code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfile
     */
    public function updateShopShippingProfile($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $origin_postal_code = null)
    {
        list($response) = $this->updateShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);
        return $response;
    }

    /**
     * Operation updateShopShippingProfileWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $origin_postal_code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopShippingProfileWithHttpInfo($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $origin_postal_code = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->updateShopShippingProfileRequest($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopShippingProfileAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $origin_postal_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileAsync($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $origin_postal_code = null)
    {
        return $this->updateShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopShippingProfileAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $origin_postal_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileAsyncWithHttpInfo($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $origin_postal_code = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfile';
        $request = $this->updateShopShippingProfileRequest($shop_id, $shipping_profile_id, $title, $origin_country_iso, $min_processing_time, $max_processing_time, $processing_time_unit, $origin_postal_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShopShippingProfile'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  string $title (optional)
     * @param  string $origin_country_iso (optional)
     * @param  int $min_processing_time (optional)
     * @param  int $max_processing_time (optional)
     * @param  string $processing_time_unit (optional)
     * @param  string $origin_postal_code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopShippingProfileRequest($shop_id, $shipping_profile_id, $title = null, $origin_country_iso = null, $min_processing_time = null, $max_processing_time = null, $processing_time_unit = null, $origin_postal_code = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateShopShippingProfile'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling updateShopShippingProfile'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }

        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($origin_country_iso !== null) {
            $formParams['origin_country_iso'] = ObjectSerializer::toFormValue($origin_country_iso);
        }
        // form params
        if ($min_processing_time !== null) {
            $formParams['min_processing_time'] = ObjectSerializer::toFormValue($min_processing_time);
        }
        // form params
        if ($max_processing_time !== null) {
            $formParams['max_processing_time'] = ObjectSerializer::toFormValue($max_processing_time);
        }
        // form params
        if ($processing_time_unit !== null) {
            $formParams['processing_time_unit'] = ObjectSerializer::toFormValue($processing_time_unit);
        }
        // form params
        if ($origin_postal_code !== null) {
            $formParams['origin_postal_code'] = ObjectSerializer::toFormValue($origin_postal_code);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShopShippingProfileDestination
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost primary_cost (optional)
     * @param  float $secondary_cost secondary_cost (optional)
     * @param  string $destination_country_iso destination_country_iso (optional)
     * @param  string $destination_region destination_region (optional)
     * @param  int $shipping_carrier_id shipping_carrier_id (optional)
     * @param  string $mail_class mail_class (optional)
     * @param  int $min_delivery_days min_delivery_days (optional)
     * @param  int $max_delivery_days max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileDestination
     */
    public function updateShopShippingProfileDestination($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->updateShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation updateShopShippingProfileDestinationWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileDestination, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopShippingProfileDestinationWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestination';
        $request = $this->updateShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileDestination',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopShippingProfileDestinationAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileDestinationAsync($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->updateShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopShippingProfileDestinationAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileDestinationAsyncWithHttpInfo($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileDestination';
        $request = $this->updateShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost, $secondary_cost, $destination_country_iso, $destination_region, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShopShippingProfileDestination'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $shipping_profile_destination_id The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing. (required)
     * @param  float $primary_cost (optional)
     * @param  float $secondary_cost (optional)
     * @param  string $destination_country_iso (optional)
     * @param  string $destination_region (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopShippingProfileDestinationRequest($shop_id, $shipping_profile_id, $shipping_profile_destination_id, $primary_cost = null, $secondary_cost = null, $destination_country_iso = null, $destination_region = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateShopShippingProfileDestination'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling updateShopShippingProfileDestination'
            );
        }
        // verify the required parameter 'shipping_profile_destination_id' is set
        if ($shipping_profile_destination_id === null || (is_array($shipping_profile_destination_id) && count($shipping_profile_destination_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_destination_id when calling updateShopShippingProfileDestination'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations/{shipping_profile_destination_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_destination_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_destination_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_destination_id),
                $resourcePath
            );
        }

        // form params
        if ($primary_cost !== null) {
            $formParams['primary_cost'] = ObjectSerializer::toFormValue($primary_cost);
        }
        // form params
        if ($secondary_cost !== null) {
            $formParams['secondary_cost'] = ObjectSerializer::toFormValue($secondary_cost);
        }
        // form params
        if ($destination_country_iso !== null) {
            $formParams['destination_country_iso'] = ObjectSerializer::toFormValue($destination_country_iso);
        }
        // form params
        if ($destination_region !== null) {
            $formParams['destination_region'] = ObjectSerializer::toFormValue($destination_region);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateShopShippingProfileUpgrade
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name upgrade_name (optional)
     * @param  string $type type (optional)
     * @param  float $price price (optional)
     * @param  float $secondary_price secondary_price (optional)
     * @param  int $shipping_carrier_id shipping_carrier_id (optional)
     * @param  string $mail_class mail_class (optional)
     * @param  int $min_delivery_days min_delivery_days (optional)
     * @param  int $max_delivery_days max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ShopShippingProfileUpgrade
     */
    public function updateShopShippingProfileUpgrade($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = null, $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        list($response) = $this->updateShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);
        return $response;
    }

    /**
     * Operation updateShopShippingProfileUpgradeWithHttpInfo
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name (optional)
     * @param  string $type (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ShopShippingProfileUpgrade, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShopShippingProfileUpgradeWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = null, $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrade';
        $request = $this->updateShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ShopShippingProfileUpgrade',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateShopShippingProfileUpgradeAsync
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name (optional)
     * @param  string $type (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileUpgradeAsync($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = null, $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        return $this->updateShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShopShippingProfileUpgradeAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name (optional)
     * @param  string $type (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShopShippingProfileUpgradeAsyncWithHttpInfo($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = null, $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        $returnType = '\Swagger\Client\Model\ShopShippingProfileUpgrade';
        $request = $this->updateShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name, $type, $price, $secondary_price, $shipping_carrier_id, $mail_class, $min_delivery_days, $max_delivery_days);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateShopShippingProfileUpgrade'
     *
     * @param  int $shop_id The unique positive non-zero numeric ID for an Etsy Shop. (required)
     * @param  int $shipping_profile_id The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is &#x60;physical&#x60;. (required)
     * @param  int $upgrade_id The numeric ID that is associated with a shipping upgrade (required)
     * @param  string $upgrade_name (optional)
     * @param  string $type (optional)
     * @param  float $price (optional)
     * @param  float $secondary_price (optional)
     * @param  int $shipping_carrier_id (optional)
     * @param  string $mail_class (optional)
     * @param  int $min_delivery_days (optional)
     * @param  int $max_delivery_days (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShopShippingProfileUpgradeRequest($shop_id, $shipping_profile_id, $upgrade_id, $upgrade_name = null, $type = null, $price = null, $secondary_price = null, $shipping_carrier_id = null, $mail_class = null, $min_delivery_days = null, $max_delivery_days = null)
    {
        // verify the required parameter 'shop_id' is set
        if ($shop_id === null || (is_array($shop_id) && count($shop_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shop_id when calling updateShopShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'shipping_profile_id' is set
        if ($shipping_profile_id === null || (is_array($shipping_profile_id) && count($shipping_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipping_profile_id when calling updateShopShippingProfileUpgrade'
            );
        }
        // verify the required parameter 'upgrade_id' is set
        if ($upgrade_id === null || (is_array($upgrade_id) && count($upgrade_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upgrade_id when calling updateShopShippingProfileUpgrade'
            );
        }

        $resourcePath = '/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shop_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shop_id' . '}',
                ObjectSerializer::toPathValue($shop_id),
                $resourcePath
            );
        }
        // path params
        if ($shipping_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipping_profile_id' . '}',
                ObjectSerializer::toPathValue($shipping_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($upgrade_id !== null) {
            $resourcePath = str_replace(
                '{' . 'upgrade_id' . '}',
                ObjectSerializer::toPathValue($upgrade_id),
                $resourcePath
            );
        }

        // form params
        if ($upgrade_name !== null) {
            $formParams['upgrade_name'] = ObjectSerializer::toFormValue($upgrade_name);
        }
        // form params
        if ($type !== null) {
            $formParams['type'] = ObjectSerializer::toFormValue($type);
        }
        // form params
        if ($price !== null) {
            $formParams['price'] = ObjectSerializer::toFormValue($price);
        }
        // form params
        if ($secondary_price !== null) {
            $formParams['secondary_price'] = ObjectSerializer::toFormValue($secondary_price);
        }
        // form params
        if ($shipping_carrier_id !== null) {
            $formParams['shipping_carrier_id'] = ObjectSerializer::toFormValue($shipping_carrier_id);
        }
        // form params
        if ($mail_class !== null) {
            $formParams['mail_class'] = ObjectSerializer::toFormValue($mail_class);
        }
        // form params
        if ($min_delivery_days !== null) {
            $formParams['min_delivery_days'] = ObjectSerializer::toFormValue($min_delivery_days);
        }
        // form params
        if ($max_delivery_days !== null) {
            $formParams['max_delivery_days'] = ObjectSerializer::toFormValue($max_delivery_days);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
